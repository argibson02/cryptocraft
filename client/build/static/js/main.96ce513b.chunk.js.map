{"version":3,"sources":["utils/CryptoContext.js","utils/queries.js","utils/mutations.js","utils/auth.js","components/listItems.js","components/Title.js","components/Transaction.js","components/CryptoGrid.js","components/Graph.js","utils/timeHelpers.js","components/InfoTab.js","components/PortfolioTabs.js","pages/Portfolio.js","pages/Dashboard.js","pages/Error.js","pages/Signup.js","pages/Login.js","App.js","index.js"],"names":["CryptoContext","createContext","useCryptoContext","useContext","CryptoProvider","children","useState","currentticker","setCurrentTicker","Provider","value","handletickerchange","ticker","GET_ME","gql","GET_PORTFOLIO","GET_CRYPTOINFO","GET_CRYPTOCANDLES","GET_CRYPTODETAILS","LOGIN_USER","ADD_USER","BUY_CRYPTO","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","mainListItems","Link","href","className","ListItem","button","ListItemIcon","ListItemText","primary","SecondaryListItems","ListSubheader","inset","onClick","Title","props","Typography","component","variant","color","gutterBottom","Transaction","un","open","handleOpen","action","price","React","transactionType","setTransactionType","amount","setAmount","ptf","setPtf","useMutation","buyCrypto","useQuery","getme_data","loading","data","me","username","curUSDbalance","curCryptos","variables","name","getPortfolio","usdBalance","cryptos","total","handleClose","handleBuy","event","a","preventDefault","console","log","alert","quantity","investment","mutationResponse","reload","handleSell","sum","forEach","element","toString","Dialog","onClose","DialogTitle","DialogContent","Box","noValidate","sx","display","flexDirection","m","width","DialogContentText","Select","autoFocus","onChange","target","label","fullWidth","inputProps","id","MenuItem","TextField","margin","type","required","defaultValue","DialogActions","Button","columns","minWidth","align","CryptoGrid","gridType","page","setPage","rowsPerPage","setRowsPerPage","setOpen","setPrice","getportfolio_data","map","Map","has","set","get","entries","getButton","createData","btn","rows","temp","i","cryptoData","cryptoInfo","length","slice","push","bool","Stack","spacing","Autocomplete","freeSolo","options","option","renderInput","params","onKeyDown","e","key","toLowerCase","Paper","overflow","TableContainer","maxHeight","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","style","TableBody","row","index","hover","role","tabIndex","stopPropagation","format","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","mt","Graph","pair","titleLabel","toUpperCase","info","cryptoCandles","last_week","xLabels","graphDataPoints","intervalLabels","timeStart","moment","unixT","timePoint","reverse","sixHourTimeInterval","datasetIdKey","labels","datasets","fill","borderColor","tension","pointStyle","radius","responsive","aspectRatio","plugins","title","text","legend","scales","x","y","font","size","ticks","interaction","intersect","backgroundColor","InfoTab","cryptoDetails_loading","cryptoDetails_data","cryptoDetails","url","dailyChange","weeklyChange","yearlyChange","yearly_high","yearly_low","flex","toDateString","TabPanel","other","hidden","aria-labelledby","p","a11yProps","PortfolioTabs","handleGridType","theme","useTheme","setValue","bgcolor","AppBar","position","Tabs","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","Copyright","getFullYear","styled","MuiAppBar","shouldForwardProp","prop","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","enteringScreen","Drawer","MuiDrawer","whiteSpace","boxSizing","overflowX","breakpoints","up","mdTheme","createTheme","PortfolioContent","setGridType","toggleDrawer","ThemeProvider","CssBaseline","Toolbar","pr","IconButton","edge","marginRight","noWrap","flexGrow","Auth","logout","Badge","alignItems","justifyContent","px","Divider","List","palette","mode","grey","height","Container","maxWidth","mb","Grid","container","item","xs","md","lg","pt","Portfolio","DashboardContent","Dashboard","Error","src","alt","border","SignUp","firstName","lastName","password","formState","setFormState","addUser","error","handleChange","handleSubmit","login","marginTop","Avatar","onSubmit","sm","borderRadius","textAlign","LogIn","message","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","redirect","pathname","to","ApolloProvider","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2ZAEMA,G,OAAgBC,2BAETC,EAAmB,kBAAMC,qBAAWH,IAEpCI,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7B,EAA0CC,mBAAS,OAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAMF,OACE,kBAACR,EAAcS,SAAf,CACEC,MAAO,CAAEH,gBAAeI,mBAND,SAACC,GAC1BJ,EAAiBI,MAOdP,I,iBCfMQ,EAASC,YAAH,mHASNC,EAAgBD,YAAH,sRAcbE,EAAiBF,YAAH,oHAQdG,EAAoBH,YAAH,uJAQjBI,EAAoBJ,YAAH,yJCvCjBK,EAAaL,YAAH,4QAYVM,EAAWN,YAAH,qWAuCRO,GAlBgBP,YAAH,uNASIA,YAAH,iKASDA,YAAH,6U,kCCLR,M,0FA1Cb,WACE,OAAOQ,IAAOC,KAAKC,c,sBAIrB,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,4BAIzC,SAAeA,GACb,IAEE,OADgBH,IAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,sBAIX,WAEE,OAAOC,aAAaC,QAAQ,c,mBAG9B,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GACjCE,OAAOC,SAASC,OAAO,O,oBAGzB,WAEEN,aAAaO,WAAW,YAExBH,OAAOC,SAASC,OAAO,S,0UCpBdE,GACT,2BAEI,gBAACC,GAAA,EAAD,CAAMC,KAAK,IAAIC,UAAU,aACrB,gBAACC,GAAA,EAAD,CAAUC,QAAM,GACZ,gBAACC,GAAA,EAAD,KACI,gBAAC,KAAD,OAEJ,gBAACC,GAAA,EAAD,CAAcC,QAAQ,gBAG9B,gBAACJ,GAAA,EAAD,CAAUC,QAAM,GACZ,gBAACC,GAAA,EAAD,KACI,gBAAC,KAAD,OAEJ,gBAACC,GAAA,EAAD,CAAcC,QAAQ,kBAMnB,SAASC,KAwCpB,OACI,2BACI,gBAACC,GAAA,EAAD,CAAeC,OAAK,GAApB,cACA,gBAACV,GAAA,EAAD,CAAMC,KAAK,aAAaC,UAAU,aAC9B,gBAACC,GAAA,EAAD,CAAUC,QAAM,EAACO,QA7BL,cA8BR,gBAACN,GAAA,EAAD,KACI,gBAAC,KAAD,OAEJ,gBAACC,GAAA,EAAD,CAAcC,QAAQ,iB,6FC7E3BK,OAZf,SAAeC,GACX,OACI,gBAACC,GAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAKC,MAAM,UAAUC,cAAY,GAC/DL,EAAMhD,W,qJCiOJsD,OA9Mf,YAA2D,IAanDC,EAbeC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MACrCzD,EAAkBL,IAAlBK,cAGR,EAA8C0D,WAAeF,GAA7D,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA4BF,WAAe,GAA3C,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAsBJ,WAAe,cAArC,mBAAOK,EAAP,KAAYC,EAAZ,KAEA,EAAoBC,aAAYnD,GAAzBoD,EAAP,oBAGA,EAAqDC,aAAS7D,GAAxB8D,GAAtC,EAAQC,QAAR,EAAgCC,MAI5BF,IACAf,EAAKe,EAAWG,GAAGC,UAKvB,IAGIC,EACAC,EAJIJ,EAASH,aAAS3D,EAAe,CACrCmE,UAAW,CAAEC,KAAMvB,KADfiB,KAMJA,IACAG,EAAgBH,EAAKO,aAAaC,WAClCJ,EAAaJ,EAAKO,aAAaE,SAQnC,IAAIC,EAAQnB,EAASJ,EAEfwB,EAAc,WAChB1B,GAAW,IAiCT2B,EAAS,yCAAG,WAAOC,GAAP,gBAAAC,EAAA,yDACdD,EAAME,iBACNC,QAAQC,IAAI,SACR1B,EAASY,GAHC,uBAIVe,MAAM,gCAJI,iCAQdF,QAAQC,IAAIb,GARE,SAUiBR,EAAU,CACrCS,UAAW,CACPC,KAAMvB,EACNhD,OAAQL,EACRyF,SAAUT,EACVU,WAAY7B,KAfN,cAUR8B,EAVQ,OAkBdL,QAAQC,IAAI,uBAEZN,IACArD,OAAOC,SAAS+D,SArBF,kBAsBPD,GAtBO,4CAAH,sDAyBTE,EAAU,yCAAG,WAAOV,GAAP,kBAAAC,EAAA,yDACfD,EAAME,iBACNC,QAAQC,IAAI,QAGRO,EAAM,EACVpB,EAAWqB,SAAQ,SAAAC,GACXA,EAAQ3F,SAAWL,IACnB8F,GAAKE,EAAQP,eAGjBK,GAAOd,GAXI,iCAYoBd,EAAU,CACrCS,UAAW,CACPC,KAAMvB,EACNhD,OAAQL,EACRyF,UAAkB,EAAPT,EACXU,aAAqB,EAAR7B,GAAWoC,cAjBrB,cAYLN,EAZK,OAqBXV,IACArD,OAAOC,SAAS+D,SAtBL,kBAuBJD,GAvBI,eA0BXH,MAAM,cAAgBxF,EAAe,KA1B1B,+DAAH,sDA+BhB,OACI,2BACI,gBAACkG,GAAA,EAAD,CAAQ5C,KAAMA,EAAM6C,QAASlB,GACzB,gBAACmB,GAAA,EAAD,cAAoBpG,GACpB,gBAACqG,GAAA,EAAD,KAEI,gBAACC,EAAA,EAAD,CACIC,YAAU,EACVvD,UAAU,OACVwD,GAAI,CACAC,QAAS,OACTC,cAAe,SACfC,EAAG,OACHC,MAAO,gBAGX,gBAACC,GAAA,EAAD,kBAIA,gBAACC,GAAA,EAAD,CACIC,WAAS,EACT5G,MAAO4D,EACPiD,SA9FA,SAAC7B,GACrBnB,EACImB,EAAM8B,OAAO9G,QA6FG+G,MAAM,YACNC,WAAS,EACTC,WAAY,CACRxC,KAAM,MACNyC,GAAI,QAGR,gBAACC,GAAA,EAAD,CAAUnH,MAAM,eAAhB,gBAGJ,gBAAC0G,GAAA,EAAD,yBAGA,gBAACC,GAAA,EAAD,CACI3G,MAAOwD,EACPqD,SA7HM,SAAC7B,GAC3BvB,EACIuB,EAAM8B,OAAO9G,QA4HG+G,MAAM,mBACNC,WAAS,EACTC,WAAY,CACRxC,KAAM,kBACNyC,GAAI,oBAGR,gBAACC,GAAA,EAAD,CAAUnH,MAAM,OAAhB,OACA,gBAACmH,GAAA,EAAD,CAAUnH,MAAM,QAAhB,SAEJ,gBAACoH,GAAA,EAAD,CACIR,WAAS,EACTS,OAAO,QACPH,GAAG,OACHH,MAAM,IACNO,KAAK,SACLN,WAAS,EACTO,UAAU,EACVC,aAAa,OACb1E,QAAQ,WACR+D,SA5IG,SAAC7B,GACxBrB,EACIqB,EAAM8B,OAAO9G,OAGjB6E,EAAQnB,EAASJ,KAyID,gBAACoD,GAAA,EAAD,KACK7B,EADL,IACahF,KAIrB,gBAAC4H,GAAA,EAAD,KACI,gBAACC,GAAA,EAAD,CAAQjF,QAASqC,GAAjB,UACA,gBAAC4C,GAAA,EAAD,CAAQjF,QAtIH,SAACuC,GACI,OAAnBxB,EACCuB,EAAUC,GAGVU,EAAWV,KAiIiD,QAApBxB,EAA4B,WAAa,YC1MvFmE,GAAU,CACZ,CAAET,GAAI,OAAQH,MAAO,OAAQa,SAAU,KACvC,CAAEV,GAAI,SAAUH,MAAO,SAAUa,SAAU,KAC3C,CAAEV,GAAI,QAASH,MAAO,iBAAoBa,SAAU,KACpD,CAAEV,GAAI,UAAWH,MAAO,WAAYa,SAAU,IAAKC,MAAO,UAI/C,SAASC,GAAT,GAAmC,IAU1C5E,EAV6B6E,EAAY,EAAZA,SACjC,EAAwBxE,WAAe,GAAvC,mBAAOyE,EAAP,KAAaC,EAAb,KACA,EAAsC1E,WAAe,IAArD,mBAAO2E,EAAP,KAAoBC,EAApB,KACA,EAAwB5E,YAAe,GAAvC,mBAAOJ,EAAP,KAAaiF,EAAb,KACA,EAA0B7E,WAAe,GAAzC,mBAAOD,EAAP,KAAc+E,EAAd,KAEA,EAA8C7I,IAAtCK,EAAR,EAAQA,cAAeI,EAAvB,EAAuBA,mBACvB,EAA0B+D,aAAS1D,GAA3B4D,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KACjB,EAAqDH,aAAS7D,GAAxB8D,GAAtC,EAAQC,QAAR,EAAgCC,MAI5BF,IACAf,EAAKe,EAAWG,GAAGC,SACnBc,QAAQC,IAAIlC,IAEhB,IAAIqB,EAAa,GAEH+D,EAAsBtE,aAAS3D,EAAe,CACxDmE,UAAW,CAAEC,KAAMvB,KADfiB,KAIRgB,QAAQC,IAAIkD,GACRA,IACA/D,EAAa+D,EAAkB5D,aAAaE,QAC5CO,QAAQC,IAAIb,IAGhB,IAAIgE,EAAM,IAAIC,IACdjE,EAAWqB,SAAQ,SAAAC,GAEX0C,EAAIE,IAAI5C,EAAQ3F,QAChBqI,EAAIG,IAAI7C,EAAQ3F,OAAQqI,EAAII,IAAI9C,EAAQ3F,QAAU2F,EAAQP,UAE1DiD,EAAIG,IAAI7C,EAAQ3F,OAAQ2F,EAAQP,aAIlB,aAAOiD,EAAIK,WAIjC,SAASC,EAAU3I,GACf,OACI,uCAGR,SAAS4I,EAAWrE,EAAMvE,EAAQoD,GAI9B,MAAO,CAAEmB,OAAMvE,SAAQoD,QAAOyF,IAFpBF,KAMd,IAAIG,EAAO,CACPF,EAAW,UAAW,MAAO,MAC7BA,EAAW,WAAY,MAAO,OAGlC,GAAI5E,EACAiB,QAAQC,IAAI,8BACT,CACH,IAAI6D,EAAO,GAEX,GAAiB,QAAblB,EAAoB,CACpB,IAAK,IAAImB,EAAI,EAAGA,EAAI/E,EAAKgF,WAAWC,WAAWC,OAAQH,IACnDD,EAAKC,GAAK/E,EAAKgF,WAAWC,WAAWF,GAAGI,QAE5CL,EAAKrD,SAAQ,SAAAC,GACTA,EAAQ0D,KAAKV,EAAUhD,EAAQ,aAInCoD,EAAO,CACH,CAAC,cAAe,MAAO,IAAOJ,KAC9B,CAAC,cAAe,MAAO,IAAOA,MAGtCG,EAAOC,EAGX,IAQM7F,EAAa,SAACoG,GAAD,OAAUpB,EAAQoB,IAGrC,OACI,gBAAC,WAAD,KACI,2BACKrG,EACK,gBAAC,GAAD,CAAaA,KAAMA,EAAMC,WAAYA,EAAYC,OAAQ,MAAOC,MAAOA,IACvE,6BAIV,gBAAC,GAAD,KAAqB,QAAbyE,EAAqB,iBAAmB,cAChD,gBAAC0B,GAAA,EAAD,CAAOC,QAAS,EAAGrD,GAAI,CAAEI,MAAO,MAC5B,gBAACkD,GAAA,EAAD,CACIzC,GAAG,oBACH0C,UAAQ,EACRC,QAASb,EAAKT,KAAI,SAACuB,GAAD,OAAYA,EAAO,MACrCC,YAAa,SAACC,GAAD,OAAY,gBAAC5C,GAAA,EAAD,iBAAe4C,EAAf,CAAuBjD,MAAM,oBAAoBkD,UAAW,SAACC,GAClF,GAAc,UAAVA,EAAEC,IAAiB,CACnB,IAAMjK,EAAS8J,EAAO/C,WAAWjH,MAAMoK,cACvCnK,EAAmBC,YAKnC,gBAACmK,GAAA,EAAD,CAAOhE,GAAI,CAAEI,MAAO,OAAQ6D,SAAU,WAClC,gBAACC,GAAA,EAAD,CAAgBlE,GAAI,CAAEmE,UAAW,MAC7B,gBAACC,GAAA,EAAD,CAAOC,cAAY,EAACC,aAAW,gBAC3B,gBAACC,GAAA,EAAD,KACI,gBAACC,GAAA,EAAD,KACKlD,GAAQY,KAAI,SAACuC,GAAD,OACT,gBAACC,GAAA,EAAD,CACIZ,IAAKW,EAAO5D,GACZW,MAAOiD,EAAOjD,MACdmD,MAAO,CAAEpD,SAAUkD,EAAOlD,WAEzBkD,EAAO/D,YAKxB,gBAACkE,GAAA,EAAD,KACKjC,EACIM,MAAMtB,EAAOE,EAAaF,EAAOE,EAAcA,GAC/CK,KAAI,SAAC2C,EAAKC,GACP,OACI,gBAACN,GAAA,EAAD,CAAUO,OAAK,EAACC,KAAK,WAAWC,UAAW,EAAGnB,IAAKgB,EAC/CtL,cAAeA,EAAeI,mBAAoBA,EAAoBwC,QAAS,SAACuC,GAC5EA,EAAME,iBACNjF,EAAmBiL,EAAI,MAG1BvD,GAAQY,KAAI,SAACuC,EAAQK,GAClB,IAAMnL,EAAQkL,EAAIC,GAClB,OAAc,IAAVA,EAEI,gBAACJ,GAAA,EAAD,CAAWZ,IAAKgB,EAAOtD,MAAOiD,EAAOjD,MAAOpF,QAAS,SAACuC,GAClDA,EAAME,iBACNF,EAAMuG,kBACNtL,EAAmBiL,EAAI,IAEvB7C,EAAS6C,EAAI,IACb9H,GAAW,KAEV0H,EAAOU,QAA2B,kBAAVxL,EACnB8K,EAAOU,OAAOxL,GACdA,GAKd,gBAAC+K,GAAA,EAAD,CAAWZ,IAAKgB,EAAOtD,MAAOiD,EAAOjD,OAChCiD,EAAOU,QAA2B,kBAAVxL,EACnB8K,EAAOU,OAAOxL,GACdA,aAW9C,gBAACyL,GAAA,EAAD,CACIC,mBAAoB,CAAC,GAAI,GAAI,KAC7B7I,UAAU,MACV8I,MAAO3C,EAAKK,OACZnB,YAAaA,EACbF,KAAMA,EACN4D,aApGS,SAAC5G,EAAO6G,GAC7B5D,EAAQ4D,IAoGIC,oBAjGgB,SAAC9G,GAC7BmD,GAAgBnD,EAAM8B,OAAO9G,OAC7BiI,EAAQ,OAkGJ,gBAACnG,GAAA,EAAD,CAAMiB,MAAM,UAAU+D,OAAO,SAAS/E,KAAK,6BAA6BsE,GAAI,CAAE0F,GAAI,IAAlF,qB,kDCrMG,SAASC,KACpB,IAAQnM,EAAkBL,IAAlBK,cAIR,EAA0BmE,aAASzD,EAAmB,CAClDiE,UAAW,CAAEyH,KAAMpM,KADfqE,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAGb+H,EAAarM,EAAcsM,cAAgB,8BAG3CC,EAAO,GACPlI,EACAiB,QAAQC,IAAI,mBAGZgH,EAAOjI,EAAKkI,cAAcjD,WAAWkD,UAKzC,IAAIC,EC3BD,SAA6BC,GAGhC,IAFA,IAAIC,EAAiB,GACjBC,EAAYC,OACPzD,EAAI,EAAGA,EAAIsD,EAAgBnD,OAAQH,IAAK,CAC7C,IAAI0D,EAASF,EAAiB,MAAJxD,EACtB2D,EAAYF,KAAOC,GAAOpB,OAAO,yBACrCiB,EAAelD,KAAKsD,GAExB,OAAOJ,EAAeK,UDmBRC,CAAoBX,GAGlC,OACI,uBAAKpK,UAAU,mBACX,uBAAKA,UAAU,cACX,gBAAC,KAAD,CACIgL,aAAa,KACb7I,KAAM,CACF8I,OAAQV,EACRW,SAAU,CAAC,CACP/I,KAAMiI,EACNe,MAAM,EACNC,YAAa,oBACbC,QAAS,GACTC,YAAY,KAGpBzD,QAAS,CACL0D,OAAQ,EACRC,YAAY,EACZC,YAAa,EACbC,QAAS,CACLC,MAAO,CACHrH,SAAS,EACTsH,KAAM1B,GAEV2B,OAAQ,CACJvH,SAAS,IAGjBwH,OAAQ,CACJC,EAAG,CACCzH,SAAS,GAEb0H,EAAG,CACCL,MAAO,CACHrH,SAAS,EACTsH,KAAM,eACNK,KAAM,CACFC,KAAM,KAGd5H,SAAS,EACT6H,MAAO,CACHF,KAAM,CACFC,KAAM,OAKtBE,YAAa,CACTC,WAAW,EACXC,gBAAiB,4BElF9B,SAASC,GAAT,GAAgC,IAWvCrL,EAX0B6E,EAAY,EAAZA,SACtBlI,EAAkBL,IAAlBK,cAIR,EAAqEmE,aAASxD,EAAmB,CAC7FgE,UAAW,CAAEyH,KAAMpM,KADN2O,EAAjB,EAAQtK,QAAsCuK,EAA9C,EAAwCtK,KAIxC,EAAqDH,aAAS7D,GAAxB8D,GAAtC,EAAQC,QAAR,EAAgCC,MAI5BF,IACAf,EAAKe,EAAWG,GAAGC,UAKvB,MAA0BL,aAAS3D,EAAe,CAC9CmE,UAAW,CAAEC,KAAMvB,KADfgB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAKbiI,EAAO,UACPoC,EACArJ,QAAQC,IAAI,sBAEZgH,EAAOqC,EAAmBC,cAActF,WAE5C,IAGI9E,EAHAqK,EAAG,mDAA+C9O,EAA/C,QAgBP,OAZIqE,EACAiB,QAAQC,IAAI,4BAEZd,EAAgBH,EAAKO,aAAaC,WAUlC,gBAAC,WAAD,KACI,gBAAC,GAAD,KAAqB,QAAboD,EACFlI,EAAcsM,cACd,gBAEW,QAAbpE,EAGI,2BAAK,gBAACnF,GAAA,EAAD,CAAYC,UAAU,KAAtB,iBACcuJ,EAAKwC,YADnB,KAGD,gBAAChM,GAAA,EAAD,CAAYC,UAAU,KAAtB,kBACoBuJ,EAAKyC,aADzB,KAGA,gBAACjM,GAAA,EAAD,CAAYC,UAAU,KAAtB,kBACoBuJ,EAAK0C,aADzB,KAIA,gBAAClM,GAAA,EAAD,CAAYC,UAAU,KAAtB,gBACkBuJ,EAAK2C,aAEvB,gBAACnM,GAAA,EAAD,CAAYC,UAAU,KAAtB,eACiBuJ,EAAK4C,aAI1B,2BACI,gBAACpM,GAAA,EAAD,CAAYC,UAAU,MAAtB,4BAEOyB,IAKnB,gBAAC1B,GAAA,EAAD,CAAYG,MAAM,iBAAiBsD,GAAI,CAAE4I,KAAM,IAA/C,OACQ,IAAI/N,MAAOgO,gBAEnB,2BAEI,gBAACpN,GAAA,EAAD,CAAMiB,MAAM,UAAUhB,KAAM4M,EAAK7H,OAAO,UAAxC,mB,gGCtFhB,SAASqI,GAASxM,GAChB,IAAQhD,EAAqCgD,EAArChD,SAAUK,EAA2B2C,EAA3B3C,MAAOmL,EAAoBxI,EAApBwI,MAAUiE,EAAnC,aAA6CzM,EAA7C,IAEA,OACE,qCACE0I,KAAK,WACLgE,OAAQrP,IAAUmL,EAClBjE,GAAE,8BAAyBiE,GAC3BmE,kBAAA,yBAAmCnE,IAC/BiE,GAEHpP,IAAUmL,GACT,gBAAChF,EAAA,EAAD,CAAKE,GAAI,CAAEkJ,EAAG,IACZ,gBAAC3M,GAAA,EAAD,KAAajD,KAavB,SAAS6P,GAAUrE,GACjB,MAAO,CACLjE,GAAG,kBAAD,OAAoBiE,GACtB,gBAAgB,uBAAhB,OAAwCA,IAI7B,SAASsE,GAAT,GAAoD,IAA5B1H,EAA2B,EAA3BA,SAAU2H,EAAiB,EAAjBA,eACzCC,EAAQC,eACd,EAA0BrM,WAAe,GAAzC,mBAAOvD,EAAP,KAAc6P,EAAd,KAmBA,OACE,gBAAC1J,EAAA,EAAD,CAAKE,GAAI,CAAEyJ,QAAS,qBAClB,gBAACC,GAAA,EAAD,CAAQC,SAAS,UACf,gBAACC,GAAA,EAAD,CACEjQ,MAAOA,EACP6G,SAtBa,SAAC7B,EAAOkL,GAGzBR,EAFc,IAAbQ,EAEc,KAGA,OAEjBL,EAASK,IAeHC,eAAe,YACfC,UAAU,UACVtN,QAAQ,YACR6H,aAAW,2BAEX,gBAAC0F,GAAA,EAAD,eAAKtJ,MAAM,cAAiByI,GAAU,KACtC,gBAACa,GAAA,EAAD,eAAKtJ,MAAM,kBAAqByI,GAAU,OAG9C,gBAAC,KAAD,CACEc,KAA0B,QAApBX,EAAMY,UAAsB,YAAc,IAChDpF,MAAOnL,EACPwQ,cAxBoB,SAACrF,GAEzB0E,EAAS1E,KAwBL,gBAACgE,GAAD,CAAUnP,MAAOA,EAAOmL,MAAO,EAAGsF,IAAKd,EAAMY,WACzC,gBAACzI,GAAD,CAAYC,SAAUA,KAE1B,gBAACoH,GAAD,CAAUnP,MAAOA,EAAOmL,MAAO,EAAGsF,IAAKd,EAAMY,WACzC,gBAACzI,GAAD,CAAYC,SAAUA,OCrDlC,SAAS2I,GAAU/N,GACf,OACI,gBAACC,GAAA,EAAD,eAAYE,QAAQ,QAAQC,MAAM,iBAAiB8E,MAAM,UAAalF,GACjE,kBAED,gBAACb,GAAA,EAAD,CAAMiB,MAAM,UAAU+D,OAAO,SAAS/E,KAAK,8CAA3C,eAEQ,KACP,IAAIb,MAAOyP,cACX,KAKb,IACMZ,GAASa,YAAOC,KAAW,CAC7BC,kBAAmB,SAACC,GAAD,MAAmB,SAATA,IADlBH,EAEZ,gBAAGjB,EAAH,EAAGA,MAAOxM,EAAV,EAAUA,KAAV,oBACC6N,OAAQrB,EAAMqB,OAAOC,OAAS,EAC9BC,WAAYvB,EAAMwB,YAAYC,OAAO,CAAC,QAAS,UAAW,CACtDC,OAAQ1B,EAAMwB,YAAYE,OAAOC,MACjCC,SAAU5B,EAAMwB,YAAYI,SAASC,iBAErCrO,GAAQ,CACRsO,WAVY,IAWZhL,MAAM,eAAD,OAXO,IAWP,OACLyK,WAAYvB,EAAMwB,YAAYC,OAAO,CAAC,QAAS,UAAW,CACtDC,OAAQ1B,EAAMwB,YAAYE,OAAOC,MACjCC,SAAU5B,EAAMwB,YAAYI,SAASG,sBAK3CC,GAASf,YAAOgB,KAAW,CAAEd,kBAAmB,SAACC,GAAD,MAAmB,SAATA,IAAjDH,EACX,gBAAGjB,EAAH,EAAGA,MAAOxM,EAAV,EAAUA,KAAV,MAAsB,CAClB,qBAAqB,aACjB6M,SAAU,WACV6B,WAAY,SACZpL,MAxBQ,IAyBRyK,WAAYvB,EAAMwB,YAAYC,OAAO,QAAS,CAC1CC,OAAQ1B,EAAMwB,YAAYE,OAAOC,MACjCC,SAAU5B,EAAMwB,YAAYI,SAASG,iBAEzCI,UAAW,eACN3O,GAAD,aACA4O,UAAW,SACXb,WAAYvB,EAAMwB,YAAYC,OAAO,QAAS,CAC1CC,OAAQ1B,EAAMwB,YAAYE,OAAOC,MACjCC,SAAU5B,EAAMwB,YAAYI,SAASC,gBAEzC/K,MAAOkJ,EAAMjG,QAAQ,IACpBiG,EAAMqC,YAAYC,GAAG,MAAQ,CAC1BxL,MAAOkJ,EAAMjG,QAAQ,UAOnCwI,GAAUC,cAEhB,SAASC,KACL,MAAwB7O,YAAe,GAAvC,mBAAOJ,EAAP,KAAaiF,EAAb,KACA,EAAgC7E,WAAe,MAA/C,mBAAOwE,EAAP,KAAiBsK,EAAjB,KACMC,EAAe,WACjBlK,GAASjF,IAOPuM,EAAiB,SAACpI,GACpBnC,QAAQC,IAAI2C,EAAU,aAAcT,GACpC+K,EAAY/K,IAGhB,OACI,gBAAC,EAAD,KACI,gBAACiL,EAAA,EAAD,CAAe5C,MAAOuC,IAClB,gBAAC/L,EAAA,EAAD,CAAKE,GAAI,CAAEC,QAAS,SAChB,gBAACkM,EAAA,EAAD,MACA,gBAAC,GAAD,CAAQxC,SAAS,WAAW7M,KAAMA,GAC9B,gBAACsP,GAAA,EAAD,CACIpM,GAAI,CACAqM,GAAI,SAGR,gBAACC,GAAA,EAAD,CACIC,KAAK,QACL7P,MAAM,UACN4H,aAAW,cACXlI,QAAS6P,EACTjM,GAAE,aACEwM,YAAa,QACT1P,GAAQ,CAAEmD,QAAS,UAG3B,gBAAC,KAAD,OAEJ,gBAAC1D,GAAA,EAAD,CACIC,UAAU,KACVC,QAAQ,KACRC,MAAM,UACN+P,QAAM,EACNzM,GAAI,CAAE0M,SAAU,IALpB,aASA,gBAACJ,GAAA,EAAD,CAAY5P,MAAM,UAAUN,QA1CrC,SAACuC,GACZA,EAAME,iBACN8N,EAAKC,WAyCmB,gBAACC,EAAA,EAAD,CAAOnQ,MAAM,aACT,gBAAC,KAAD,UAKhB,gBAAC,GAAD,CAAQD,QAAQ,YAAYK,KAAMA,GAC9B,gBAACsP,GAAA,EAAD,CACIpM,GAAI,CACAC,QAAS,OACT6M,WAAY,SACZC,eAAgB,WAChBC,GAAI,CAAC,KAGT,gBAACV,GAAA,EAAD,CAAYlQ,QAAS6P,GACjB,gBAAC,IAAD,QAGR,gBAACgB,GAAA,EAAD,MACA,gBAACC,GAAA,EAAD,KAAO1R,IACP,gBAACyR,GAAA,EAAD,MACA,gBAACC,GAAA,EAAD,KAAOjR,OAEX,gBAAC6D,EAAA,EAAD,CACItD,UAAU,OACVwD,GAAI,CACAiI,gBAAiB,SAACqB,GAAD,MACU,UAAvBA,EAAM6D,QAAQC,KACR9D,EAAM6D,QAAQE,KAAK,KACnB/D,EAAM6D,QAAQE,KAAK,MAC7BX,SAAU,EACVY,OAAQ,QACRrJ,SAAU,SAGd,gBAACmI,GAAA,EAAD,MACA,gBAACmB,EAAA,EAAD,CAAWC,SAAS,KAAKxN,GAAI,CAAE0F,GAAI,EAAG+H,GAAI,IACtC,gBAACC,GAAA,EAAD,CAAMC,WAAS,EAACtK,QAAS,GAErB,gBAACqK,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,gBAAC/J,GAAA,EAAD,CAAOrI,UAAU,cACbqE,GAAI,CACAkJ,EAAG,EACHjJ,QAAS,OACTC,cAAe,WAGnB,gBAAC,GAAD,QAGR,gBAACwN,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,gBAAC/J,GAAA,EAAD,CAAOrI,UAAU,cACbqE,GAAI,CACAkJ,EAAG,EACHjJ,QAAS,OACTC,cAAe,WAGnB,gBAACgI,GAAD,CAASxG,SAAUA,EAAU2H,eAAkBA,MAGvD,gBAACqE,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,gBAACzE,GAAD,CAAe1H,SAAUA,EAAU2H,eAAkBA,MAG7D,gBAACgB,GAAD,CAAWrK,GAAI,CAAEgO,GAAI,UASlC,SAASC,KACpB,OAAO,gBAAClC,GAAD,MCxLX,SAAS1B,GAAU/N,GACf,OACI,gBAACC,GAAA,EAAD,eAAYE,QAAQ,QAAQC,MAAM,iBAAiB8E,MAAM,UAAalF,GACjE,kBAED,gBAACb,GAAA,EAAD,CAAMiB,MAAM,UAAU+D,OAAO,SAAS/E,KAAK,8CAA3C,eAEQ,KACP,IAAIb,MAAOyP,cACX,KAKb,IACMZ,GAASa,YAAOC,KAAW,CAC7BC,kBAAmB,SAACC,GAAD,MAAmB,SAATA,IADlBH,EAEZ,gBAAGjB,EAAH,EAAGA,MAAOxM,EAAV,EAAUA,KAAV,oBACC6N,OAAQrB,EAAMqB,OAAOC,OAAS,EAC9BC,WAAYvB,EAAMwB,YAAYC,OAAO,CAAC,QAAS,UAAW,CACtDC,OAAQ1B,EAAMwB,YAAYE,OAAOC,MACjCC,SAAU5B,EAAMwB,YAAYI,SAASC,iBAErCrO,GAAQ,CACRsO,WAVY,IAWZhL,MAAM,eAAD,OAXO,IAWP,OACLyK,WAAYvB,EAAMwB,YAAYC,OAAO,CAAC,QAAS,UAAW,CACtDC,OAAQ1B,EAAMwB,YAAYE,OAAOC,MACjCC,SAAU5B,EAAMwB,YAAYI,SAASG,sBAK3CC,GAASf,YAAOgB,KAAW,CAAEd,kBAAmB,SAACC,GAAD,MAAmB,SAATA,IAAjDH,EACX,gBAAGjB,EAAH,EAAGA,MAAOxM,EAAV,EAAUA,KAAV,MAAsB,CAClB,qBAAqB,aACjB6M,SAAU,WACV6B,WAAY,SACZpL,MAxBQ,IAyBRyK,WAAYvB,EAAMwB,YAAYC,OAAO,QAAS,CAC1CC,OAAQ1B,EAAMwB,YAAYE,OAAOC,MACjCC,SAAU5B,EAAMwB,YAAYI,SAASG,iBAEzCI,UAAW,eACN3O,GAAD,aACA4O,UAAW,SACXb,WAAYvB,EAAMwB,YAAYC,OAAO,QAAS,CAC1CC,OAAQ1B,EAAMwB,YAAYE,OAAOC,MACjCC,SAAU5B,EAAMwB,YAAYI,SAASC,gBAEzC/K,MAAOkJ,EAAMjG,QAAQ,IACpBiG,EAAMqC,YAAYC,GAAG,MAAQ,CAC1BxL,MAAOkJ,EAAMjG,QAAQ,UAOnCwI,GAAUC,cAEhB,SAASoC,KACL,MAAwBhR,YAAe,GAAvC,mBAAOJ,EAAP,KAAaiF,EAAb,KACA,EAAgC7E,WAAe,OAA/C,mBAAOwE,EAAP,KAAiBsK,EAAjB,KACMC,EAAe,WACjBlK,GAASjF,IAMPuM,EAAiB,SAACpI,GACpBnC,QAAQC,IAAI2C,EAAU,aAAcT,GACpC+K,EAAY/K,IAGhB,EAA0BtD,aAAS7D,GAAnC,EAAQ+D,QAAR,EAAiBC,KAKjB,OACI,gBAAC,EAAD,KACI,gBAACoO,EAAA,EAAD,CAAe5C,MAAOuC,IAClB,gBAAC/L,EAAA,EAAD,CAAKE,GAAI,CAAEC,QAAS,SAChB,gBAACkM,EAAA,EAAD,MACA,gBAAC,GAAD,CAAQxC,SAAS,WAAW7M,KAAMA,GAC9B,gBAACsP,GAAA,EAAD,CACIpM,GAAI,CACAqM,GAAI,SAGR,gBAACC,GAAA,EAAD,CACIC,KAAK,QACL7P,MAAM,UACN4H,aAAW,cACXlI,QAAS6P,EACTjM,GAAE,aACEwM,YAAa,QACT1P,GAAQ,CAAEmD,QAAS,UAG3B,gBAAC,KAAD,OAEJ,gBAAC1D,GAAA,EAAD,CACIC,UAAU,KACVC,QAAQ,KACRC,MAAM,UACN+P,QAAM,EACNzM,GAAI,CAAE0M,SAAU,IALpB,aASA,gBAACJ,GAAA,EAAD,CAAY5P,MAAM,UAAUN,QA9CrC,SAACuC,GACZA,EAAME,iBACN8N,EAAKC,WA6CmB,gBAACC,EAAA,EAAD,CAAOnQ,MAAM,aACT,gBAAC,KAAD,UAKhB,gBAAC,GAAD,CAAQD,QAAQ,YAAYK,KAAMA,GAC9B,gBAACsP,GAAA,EAAD,CACIpM,GAAI,CACAC,QAAS,OACT6M,WAAY,SACZC,eAAgB,WAChBC,GAAI,CAAC,KAGT,gBAACV,GAAA,EAAD,CAAYlQ,QAAS6P,GACjB,gBAAC,IAAD,QAGR,gBAACgB,GAAA,EAAD,MACA,gBAACC,GAAA,EAAD,KAAO1R,IACP,gBAACyR,GAAA,EAAD,MACA,gBAACC,GAAA,EAAD,KAAOjR,OAEX,gBAAC6D,EAAA,EAAD,CACItD,UAAU,OACVwD,GAAI,CACAiI,gBAAiB,SAACqB,GAAD,MACU,UAAvBA,EAAM6D,QAAQC,KACR9D,EAAM6D,QAAQE,KAAK,KACnB/D,EAAM6D,QAAQE,KAAK,MAC7BX,SAAU,EACVY,OAAQ,QACRrJ,SAAU,SAGd,gBAACmI,GAAA,EAAD,MACA,gBAACmB,EAAA,EAAD,CAAWC,SAAS,KAAKxN,GAAI,CAAE0F,GAAI,EAAG+H,GAAI,IACtC,gBAACC,GAAA,EAAD,CAAMC,WAAS,EAACtK,QAAS,GAErB,gBAACqK,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,gBAAC/J,GAAA,EAAD,CAAOrI,UAAU,cACbqE,GAAI,CACAkJ,EAAG,EACHjJ,QAAS,OACTC,cAAe,WAGnB,gBAAC,GAAD,QAGR,gBAACwN,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,gBAAC/J,GAAA,EAAD,CAAOrI,UAAU,cACbqE,GAAI,CACAkJ,EAAG,EACHjJ,QAAS,OACTC,cAAe,WAGnB,gBAACgI,GAAD,CAASxG,SAAUA,EAAU2H,eAAkBA,MAGvD,gBAACqE,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,gBAAC7J,GAAA,EAAD,CAAOnD,GAAG,4BAA4Bb,GAAI,CAAEkJ,EAAG,EAAGjJ,QAAS,OAAQC,cAAe,WAC9E,gBAACuB,GAAD,CAAYC,SAAUA,EAAU2H,eAAkBA,OAI9D,gBAAC,GAAD,CAAWrJ,GAAI,CAAEgO,GAAI,UASlC,SAASG,KACpB,OAAO,gBAACD,GAAD,M,WC5NIE,GARD,WACV,OACI,yBAAKvN,GAAG,mBACJ,yBAAKA,GAAK,WAAWwN,IAAI,6EAA6EC,IAAI,0BAA0BC,OAAO,Q,sCCkBvJ,SAASlE,GAAU/N,GACf,OACI,gBAACC,GAAA,EAAD,eAAYE,QAAQ,QAAQC,MAAM,iBAAiB8E,MAAM,UAAalF,GACjE,kBACD,gBAACb,GAAA,EAAD,CAAMiB,MAAM,UAAU+D,OAAS,SAAS/E,KAAK,8CAA7C,eAEQ,KACP,IAAIb,MAAOyP,cACX,KAKb,IAAMhB,GAAQwC,cAEC,SAAS0C,KACpB,MAAkCjV,mBAAS,CACvCyE,SAAU,GACVyQ,UAAW,GACXC,SAAU,GACVC,SAAU,KAJd,mBAAOC,EAAP,KAAkBC,EAAlB,KAOA,EAAmCpR,aAAYpD,GAA/C,mBAAOyU,EAAP,YAAkBC,EAAlB,EAAkBA,MAEZC,GAFN,EAAyBlR,KAEJ,SAACa,GAClB,MAAwBA,EAAM8B,OAAtBrC,EAAR,EAAQA,KAAMzE,EAAd,EAAcA,MAEdkV,EAAa,2BACND,GADK,kBAEPxQ,EAAOzE,OAIVsV,EAAY,yCAAG,WAAOtQ,GAAP,kBAAAC,EAAA,6DACjBD,EAAME,iBADW,kBAGUiQ,EAAQ,CAC3B3Q,UAAU,eAAMyQ,KAJP,gBAGL9Q,EAHK,EAGLA,KAGR6O,EAAKuC,MAAMpR,EAAKgR,QAAQpU,OANX,gDAQboE,QAAQC,IAAR,MARa,yDAAH,sDAmBlB,OACI,gBAACmN,EAAA,EAAD,CAAe5C,MAAOA,IAClB,gBAACiE,EAAA,EAAD,CAAW5R,UAAY,mBAAmBa,UAAU,OAAOgR,SAAS,MAChE,gBAACrB,EAAA,EAAD,MACA,gBAACrM,EAAA,EAAD,CACIE,GAAI,CACAmP,UAAW,EACXlP,QAAS,OACTC,cAAe,SACf4M,WAAY,WAGhB,gBAACsC,GAAA,EAAD,CAAQpP,GAAI,CAAEG,EAAG,EAAGsJ,QAAS,mBACzB,gBAAC,KAAD,OAEJ,gBAAClN,GAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,MAAnC,WAGA,gBAACqD,EAAA,EAAD,CAAKtD,UAAU,OAAOuD,YAAU,EAACsP,SAAUJ,EAAcjP,GAAI,CAAE0F,GAAI,IAC/D,gBAACgI,GAAA,EAAD,CAAMC,WAAS,EAACtK,QAAS,GACrB,gBAACqK,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIyB,GAAI,GACnB,gBAACvO,GAAA,EAAD,CACI3C,KAAK,YACL8C,UAAQ,EACRP,WAAS,EACTE,GAAG,YACHH,MAAM,aACNH,WAAS,EACT5G,MAAOiV,EAAUH,UACjBjO,SAAUwO,KAGlB,gBAACtB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIyB,GAAI,GACnB,gBAACvO,GAAA,EAAD,CACIG,UAAQ,EACRP,WAAS,EACTE,GAAG,WACHH,MAAM,YACNtC,KAAK,WACLzE,MAAOiV,EAAUF,SACjBlO,SAAUwO,KAGlB,gBAACtB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,gBAAC9M,GAAA,EAAD,CACIG,UAAQ,EACRP,WAAS,EACTE,GAAG,WACHH,MAAM,WACNtC,KAAK,WACLzE,MAAOiV,EAAU5Q,SACjBwC,SAAUwO,KAGlB,gBAACtB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,gBAAC9M,GAAA,EAAD,CACIG,UAAQ,EACRP,WAAS,EACTvC,KAAK,WACLsC,MAAM,WACNO,KAAK,WACLJ,GAAG,WACHlH,MAAOiV,EAAUD,SACjBnO,SAAUwO,MAItB,gBAAC3N,GAAA,EAAD,CACIJ,KAAK,SACLN,WAAS,EACTlE,QAAQ,YACRuD,GAAI,CAAE0F,GAAI,EAAG+H,GAAI,IAJrB,WAQA,gBAACC,GAAA,EAAD,CAAMC,WAAS,EAACZ,eAAe,YAC3B,gBAACW,GAAA,EAAD,CAAME,MAAI,GACN,gBAACnS,GAAA,EAAD,CAAMC,KAAK,SAASe,QAAQ,SAA5B,qCAKPsS,GACG,uBAAKpT,UAAU,WAAWgJ,MA1FjC,CACbsD,gBAAiB,qBACjBsH,aAAc,MACd7S,MAAO,QACP8S,UAAW,WAuFc,mFAKjB,gBAAC,GAAD,CAAWxP,GAAI,CAAE0F,GAAI,OC9IrC,SAAS2E,GAAU/N,GACf,OACI,gBAACC,GAAA,EAAD,eAAYE,QAAQ,QAAQC,MAAM,iBAAiB8E,MAAM,UAAalF,GACjE,kBACD,gBAACb,GAAA,EAAD,CAAMiB,MAAM,UAAU+D,OAAS,SAAS/E,KAAK,8CAA7C,eAEQ,KACP,IAAIb,MAAOyP,cACX,KAKb,IAAMhB,GAAQwC,cA8GC2D,GA5GD,SAACnT,GACX,MAAkC/C,mBAAS,CACvCyE,SAAU,GAAI2Q,SAAU,KAD5B,mBAAOC,EAAP,KAAkBC,EAAlB,KAGA,EAAiCpR,aAAYrD,GAA7C,mBAAO8U,EAAP,YAAgBH,EAAhB,EAAgBA,MAEVC,GAFN,EAAuBlR,KAEF,SAACa,GAClB,MAAwBA,EAAM8B,OAAtBrC,EAAR,EAAQA,KAAMzE,EAAd,EAAcA,MAEdkV,EAAa,2BACND,GADK,kBAEPxQ,EAAOzE,OAIVsV,EAAY,yCAAG,WAAOtQ,GAAP,kBAAAC,EAAA,6DACjBD,EAAME,iBADW,kBAGUqQ,EAAM,CACzB/Q,UAAU,eAAMyQ,KAJP,gBAGL9Q,EAHK,EAGLA,KAGR6O,EAAKuC,MAAMpR,EAAKoR,MAAMxU,OANT,gDAQboE,QAAQiQ,MAAR,MARa,QAWjBF,EAAa,CACT7Q,SAAU,GACV2Q,SAAU,KAbG,yDAAH,sDAwBlB,OACI,gBAACzC,EAAA,EAAD,CAAe5C,MAAOA,IAClB,gBAACiE,EAAA,EAAD,CAAW5R,UAAY,mBAAmBa,UAAU,OAAOgR,SAAS,MAChE,gBAACrB,EAAA,EAAD,MACA,gBAACrM,EAAA,EAAD,CACIE,GAAI,CACAmP,UAAW,EACXlP,QAAS,OACTC,cAAe,SACf4M,WAAY,WAGhB,gBAACsC,GAAA,EAAD,CAAQpP,GAAI,CAAEG,EAAG,EAAGsJ,QAAS,mBACzB,gBAAC,KAAD,OAEJ,gBAAClN,GAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,MAAnC,UAGA,gBAACqD,EAAA,EAAD,CAAKtD,UAAU,OAAO6S,SAAUJ,EAAclP,YAAU,EAACC,GAAI,CAAE0F,GAAI,IAC/D,gBAAC3E,GAAA,EAAD,CACIC,OAAO,SACPE,UAAQ,EACRP,WAAS,EACTE,GAAG,WACHH,MAAM,WACNtC,KAAK,WACLmC,WAAS,EACT5G,MAAOiV,EAAU5Q,SACjBwC,SAAUwO,IAEd,gBAACjO,GAAA,EAAD,CACIC,OAAO,SACPE,UAAQ,EACRP,WAAS,EACTvC,KAAK,WACLsC,MAAM,WACNO,KAAK,WACLJ,GAAG,WACHlH,MAAOiV,EAAUD,SACjBnO,SAAUwO,IAEd,gBAAC3N,GAAA,EAAD,CACIJ,KAAK,SACLN,WAAS,EACTlE,QAAQ,YACRuD,GAAI,CAAE0F,GAAI,EAAG+H,GAAI,IAJrB,UAQA,gBAACC,GAAA,EAAD,CAAMC,WAAS,GACX,gBAACD,GAAA,EAAD,CAAME,MAAI,GACN,gBAACnS,GAAA,EAAD,CAAMC,KAAK,UAAUe,QAAQ,SACxB,oCAIZsS,GACG,uBAAKpT,UAAU,WAAWgJ,MAhEjC,CACbsD,gBAAiB,qBACjBsH,aAAc,MACd7S,MAAO,QACP8S,UAAW,WA6DcT,EAAMW,WAKvB,gBAAC,GAAD,CAAW1P,GAAI,CAAE0F,GAAI,EAAG+H,GAAI,QCjItCkC,GAAWC,YAAe,CAC9BC,IAAK,aAGDC,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BvV,EAAQM,aAAaC,QAAQ,YACnC,MAAO,CACLgV,QAAQ,2BACHA,GADE,IAELC,cAAexV,EAAK,iBAAaA,GAAU,SAK3CyV,GAAS,IAAIC,IAAa,CAC9BC,KAAMP,GAASQ,OAAOX,IACtBY,MAAO,IAAIC,MA+BEC,OA5Bf,WACE,IACIC,EAMJ,OAJmB,OAHA1V,aAAaC,QAAQ,aAGgB,YAA7BG,OAAOC,SAASsV,WACzCD,EAAW,kBAAC,IAAD,CAAUE,GAAG,YAIxB,kBAACC,EAAA,EAAD,CAAgBV,OAAQA,IACtB,kBAAC,IAAD,KACE,6BACGO,EACD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIvU,UAAW2R,KACjC,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,SAASvU,UAAWiT,KACtC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,UAAUvU,UAAWgS,KAEvC,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,aAAavU,UAAWyR,KAC1C,kBAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,MAAMvU,UAAW2R,KACnC,kBAAC,IAAD,CAAO3R,UAAW4R,UC5C9B4C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.96ce513b.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst CryptoContext = createContext();\n\nexport const useCryptoContext = () => useContext(CryptoContext);\n\nexport const CryptoProvider = ({ children }) => {\n    const [currentticker, setCurrentTicker] = useState('btc');\n\n  const handletickerchange = (ticker) => {\n    setCurrentTicker(ticker);\n}\n\n  return (\n    <CryptoContext.Provider\n      value={{ currentticker, handletickerchange }}\n    >\n      {children}\n    </CryptoContext.Provider>\n  );\n};\n","import { gql } from '@apollo/client';\n\nexport const GET_ME = gql`\n    query me {\n        me {\n            _id\n            username\n        }\n    }\n`;\n\nexport const GET_PORTFOLIO = gql`\n    query getPortfolio ($name: String) {\n        getPortfolio (name: $name) {\n            name\n            usdBalance\n            cryptos {\n                ticker\n                quantity\n                date\n            }\n        }\n    }\n`;\n\nexport const GET_CRYPTOINFO = gql`\n    query cryptoData {\n        cryptoData {\n            cryptoInfo\n        }\n    }\n`;\n\nexport const GET_CRYPTOCANDLES = gql`\n    query cryptoCandles ($pair: String) {\n        cryptoCandles(pair: $pair) {\n            cryptoInfo\n        }\n    }\n`;\n\nexport const GET_CRYPTODETAILS = gql`\n    query cryptoDetails ($pair : String) { \n        cryptoDetails(pair: $pair) {\n            cryptoInfo\n        }\n    }\n`;","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n    mutation login($username: String!, $password: String!) {\n        login(username: $username, password: $password) {\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`;\n\nexport const ADD_USER = gql`\n    mutation addUser($username: String!, $firstName: String!, $lastName: String!, $password: String!) {\n        addUser(username: $username, firstName: $firstName, lastName: $lastName, password: $password) {\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`;\n\n// export const ADD_PORTFOLIO = gql`\n//     mutation addPortfolio($name: String, $usdBalance: Float!) {\n//         addPortfolio(name: $name, usdBalance: $usdBalance) {\n//             name\n//             usdBalance\n//         }\n//     }\n// `;\n\nexport const ADD_PORTFOLIO = gql`\n    mutation addPortfolio($name: String, $usdBalance: Float!) {\n        addPortfolio(name: $name, usdBalance: $usdBalance) {\n            name\n            usdBalance\n        }\n    }\n`;\n\nexport const UPDATE_BALANCE = gql`\n    mutation updateBalance($name: String!) {\n        updateBalance(name: $name) {\n            historicalBalance\n        }\n    }\n`;\n\n\nexport const BUY_CRYPTO = gql`\n    mutation buyCrypto($name: String!, $ticker: String!, $quantity: Float!, $investment: String!) {\n        buyCrypto(name: $name, ticker: $ticker, quantity: $quantity, investment: $investment) {\n            cryptos {\n                ticker\n                quantity\n            }\n        }\n    }\n`;\n\n// sell crypto mutation here","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import * as React from 'react';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\nimport PeopleIcon from '@mui/icons-material/People';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport AssignmentIcon from '@mui/icons-material/Assignment';\n\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Link from '@mui/material/Link'\n\nimport { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_PORTFOLIO } from '../utils/mutations';\n\nexport const mainListItems = (\n    <div>\n        {/* TODO make the href colors of visited not showing */}\n        <Link href=\"/\" className=\"sideLinks\">\n            <ListItem button>\n                <ListItemIcon>\n                    <DashboardIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Dashboard\" />\n            </ListItem>\n        </Link>\n        <ListItem button>\n            <ListItemIcon>\n                <BarChartIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Leaderboard\" />\n        </ListItem>\n    </div>\n);\n\n// map portfolios here\nexport default function SecondaryListItems() {\n    // const [open, setOpen] = useState(false)\n    // const [formState, setFormState] = useState({ name: '' });\n\n    // const [addPortfolio, { error, data }] = useMutation(ADD_PORTFOLIO);\n\n    // const handleChange = (event) => {\n    //     const { name, value } = event.target;\n\n    //     setFormState({\n    //         ...formState,\n    //         [name]: value\n    //     });\n    // }\n\n    const handleClickOpen = () => {\n\n    }\n\n    // const handleCancel = () => {\n    //     setOpen(false);\n    // };\n\n    // const handleAdd = async (event) => {\n    //     event.preventDefault();\n    //     console.log(formState);\n\n    //     try {\n    //         const { data } = await addPortfolio({\n    //             variables: { ...formState, usdBalance: 1000000 }\n    //         })\n    //         console.log(data)\n    //     } catch (e) {\n    //         console.error(e)\n    //     }\n\n    //     setFormState({ name: '' });\n    //     setOpen(false);\n    // }\n\n    return (\n        <div>\n            <ListSubheader inset>Portfolios</ListSubheader>\n            <Link href=\"/portfolio\" className=\"sideLinks\">\n                <ListItem button onClick={handleClickOpen}>\n                    <ListItemIcon>\n                        <AssignmentIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Portfolio\" />\n                </ListItem>\n            </Link>\n\n            {/* <Dialog open={open} onClose={handleCancel}>\n                <DialogTitle>Add a new Portfolio</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Congrats, you're a millionaire! We fund each of your portfolios with $1,000,000 to start. \n                        See how different sets of cryptocurrencies perform with each portfolio.\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        name=\"name\"\n                        id=\"name\"\n                        label=\"Portfolio name\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"standard\"\n                        value={formState.name}\n                        onChange={handleChange}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCancel}>Cancel</Button>\n                    <Button onClick={handleAdd}>Add Portfolio</Button>\n                </DialogActions>\n            </Dialog> */}\n        </div>\n    )\n\n}","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\n\nfunction Title(props) {\n    return (\n        <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n            {props.children}\n        </Typography>\n    );\n}\n\nTitle.propTypes = {\n    children: PropTypes.node,\n};\n\nexport default Title;","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\n\n// import FormControl from '@mui/material/FormControl';\n// import FormControlLabel from '@mui/material/FormControlLabel';\n// import InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\n// import Switch from '@mui/material/Switch';\n\n\nimport { useQuery } from '@apollo/client'\n// import { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useCryptoContext } from '../utils/CryptoContext';\n\nimport { GET_PORTFOLIO, GET_ME } from '../utils/queries';\nimport { BUY_CRYPTO } from '../utils/mutations';\n\nfunction Transaction({ open, handleOpen, action, price }) {\n    const { currentticker } = useCryptoContext();\n    // const { currentticker, handletickerchange } = useCryptoContext(); // possibly need handletickerchange\n\n    const [transactionType, setTransactionType] = React.useState(action);\n    const [amount, setAmount] = React.useState(0);\n    const [ptf, setPtf] = React.useState(\"portfolio1\");\n\n    const [buyCrypto] = useMutation(BUY_CRYPTO);\n    // sell crypto add the mutation \n\n    const { loading: getme_loading, data: getme_data } = useQuery(GET_ME);\n\n    let un; //checks username -> profile username\n\n    if (getme_data) {\n        un = getme_data.me.username;\n        // console.log(un)\n    }\n\n    // Grabs portfolio data\n    const { data } = useQuery(GET_PORTFOLIO, {\n        variables: { name: un }\n    });\n    let curUSDbalance;\n    let curCryptos;\n\n    if (data) {\n        curUSDbalance = data.getPortfolio.usdBalance;\n        curCryptos = data.getPortfolio.cryptos;\n        // console.log(curCryptos)\n    }\n    //\n\n\n\n    // BUY FUNCTIONS\n    let total = amount / price;\n    // console.log(price);\n    const handleClose = () => {\n        handleOpen(false);\n    };\n\n    const handleTransactionType = (event) => {\n        setTransactionType(\n            event.target.value,\n        );\n    };\n\n    const handleAmountChange = (event) => {\n        setAmount(\n            event.target.value,\n        );\n\n        total = amount / price;\n\n    }\n\n    const handlePtfChange = (event) => {\n        setPtf(\n            event.target.value,\n        );\n    }\n\n    const handleSubmit = (event) => {\n        if(transactionType == \"buy\"){\n            handleBuy(event);\n        }\n        else{\n            handleSell(event);\n        }\n    }\n\n    const handleBuy = async (event) => {\n        event.preventDefault();\n        console.log(\"buy\");\n        if (amount > curUSDbalance) {\n            alert(\"You don't have enough money!\");\n            return;\n        }\n\n        console.log(curCryptos);\n        \n        const mutationResponse = await buyCrypto({\n            variables: {\n                name: un,\n                ticker: currentticker,\n                quantity: total,\n                investment: amount\n            }\n        })\n        console.log(\"purchase successful\");\n        // maybe give user feedback\n        handleClose();\n        window.location.reload(); \n        return mutationResponse;\n    }\n\n    const handleSell = async (event) => {\n        event.preventDefault();\n        console.log(\"sell\");\n       \n        // check to see if the sell is valid, traverse through map to see if i have it\n        let sum = 0;\n        curCryptos.forEach(element => {\n            if (element.ticker === currentticker) {\n                sum+=element.quantity;\n            }\n        });\n        if (sum >= total) {\n            const mutationResponse = await buyCrypto({\n                variables: {\n                    name: un,\n                    ticker: currentticker,\n                    quantity: (total*-1),\n                    investment: (amount*-1).toString()\n                }\n            })\n            // add feedback of sell successful\n            handleClose();\n            window.location.reload(); \n            return mutationResponse;\n        }\n        else {\n            alert(\"Not enough \" + currentticker +\"!\");\n            return;\n        }\n    }\n\n    return (\n        <div>\n            <Dialog open={open} onClose={handleClose}>\n                <DialogTitle>Trade {currentticker}</DialogTitle>\n                <DialogContent>\n\n                    <Box\n                        noValidate\n                        component=\"form\"\n                        sx={{\n                            display: 'flex',\n                            flexDirection: 'column',\n                            m: 'auto',\n                            width: 'fit-content',\n                        }}\n                    >\n                        <DialogContentText>\n                            Portfolio\n                        </DialogContentText>\n                        {/* select which portfolio to buy or choose from */}\n                        <Select\n                            autoFocus\n                            value={ptf}\n                            onChange={handlePtfChange}\n                            label=\"Portfolio\"\n                            fullWidth\n                            inputProps={{\n                                name: 'ptf',\n                                id: 'ptf',\n                            }}\n                        >\n                            <MenuItem value=\"Portfolio 1\">portfolio 1</MenuItem>\n                            {/* list other ones here */}\n                        </Select>\n                        <DialogContentText>\n                            Transaction Type\n                        </DialogContentText>\n                        <Select\n                            value={transactionType}\n                            onChange={handleTransactionType}\n                            label=\"Transaction Type\"\n                            fullWidth\n                            inputProps={{\n                                name: 'transactionType',\n                                id: 'transactionType',\n                            }}\n                        >\n                            <MenuItem value=\"buy\">Buy</MenuItem>\n                            <MenuItem value=\"sell\">Sell</MenuItem>\n                        </Select>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"$\"\n                            type=\"number\" //or some number idk, figure out how to replace it when you click onit\n                            fullWidth\n                            required={true}\n                            defaultValue=\"0.00\"\n                            variant=\"standard\"\n                            onChange={handleAmountChange}\n                        />\n                        <DialogContentText>\n                            {total} {currentticker}\n                        </DialogContentText>\n                    </Box>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>Cancel</Button>\n                    <Button onClick={handleSubmit}>{transactionType === \"buy\" ? \"Purchase\" : \"Sell\"}</Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\n\nexport default Transaction;","import * as React from 'react';\nimport { useQuery } from '@apollo/client'\n\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport Title from './Title';\nimport Link from '@mui/material/Link';\n// import Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nimport Transaction from './Transaction';\nimport { useCryptoContext } from '../utils/CryptoContext';\nimport { GET_CRYPTOINFO, GET_PORTFOLIO, GET_ME } from '../utils/queries';\n\nconst columns = [\n    { id: 'name', label: 'Name', minWidth: 170 },\n    { id: 'ticker', label: 'Ticker', minWidth: 100 },\n    { id: 'price', label: 'Price\\u00a0(USD)', minWidth: 170 },\n    { id: 'buysell', label: 'Buy/Sell', minWidth: 100, align: 'right' }\n];\n\n// gridType will either be \"my\" or \"all\"\nexport default function CryptoGrid({ gridType }) {\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const [open, setOpen] = React.useState(false);\n    const [price, setPrice] = React.useState(0)\n\n    const { currentticker, handletickerchange } = useCryptoContext();\n    const { loading, data } = useQuery(GET_CRYPTOINFO);\n    const { loading: getme_loading, data: getme_data } = useQuery(GET_ME);\n    \n    let un; //checks username -> profile username\n\n    if (getme_data) {\n        un = getme_data.me.username;\n        console.log(un)\n    }\n    let curCryptos = [];\n    // Grabs portfolio data\n    const { data: getportfolio_data } = useQuery(GET_PORTFOLIO, {\n        variables: { name: un }\n    });\n\n    console.log(getportfolio_data)\n    if (getportfolio_data) {\n        curCryptos = getportfolio_data.getPortfolio.cryptos;\n        console.log(curCryptos)\n    }\n\n    let map = new Map();\n    curCryptos.forEach(element => {\n        // console.log(element)\n        if (map.has(element.ticker)) {\n            map.set(element.ticker, map.get(element.ticker) + element.quantity);\n        } else {\n            map.set(element.ticker, element.quantity);\n        }\n    });\n\n    const cryptoQuantities = [...map.entries()];\n\n    // work from here\n\n    function getButton(ticker) {\n        return (\n            <button>Trade</button>\n        )\n    }\n    function createData(name, ticker, price) {\n        // TODO add button\n        let btn = getButton(ticker);\n        // console.log(btn);\n        return { name, ticker, price, btn };\n    }\n\n    // default seed data\n    var rows = [\n        createData('Bitcoin', 'BTC', 44000),\n        createData('Ethereum', 'ETH', 4080),\n    ];\n\n    if (loading) {\n        console.log('loading crypto grid...')\n    } else {\n        let temp = [];\n\n        if (gridType === \"all\") {\n            for (let i = 0; i < data.cryptoData.cryptoInfo.length; i++) {\n                temp[i] = data.cryptoData.cryptoInfo[i].slice();\n            }\n            temp.forEach(element => {\n                element.push(getButton(element[1]));\n            });\n        }\n        else {\n            temp = [\n                ['My Crypto 1', 'BTC', 50000, getButton('btc')],\n                ['My Crypto 2', 'ETH', 50000, getButton('eth')]\n            ];\n        }\n        rows = temp;\n    }\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n    const handleOpen = (bool) => setOpen(bool);\n\n\n    return (\n        <React.Fragment>\n            <div>\n                {open\n                    ? <Transaction open={open} handleOpen={handleOpen} action={\"buy\"} price={price} />\n                    : <div></div>\n                }\n            </div>\n\n            <Title>{gridType === \"all\" ? \"Browse Cryptos\" : \"My Cryptos\"}</Title>\n            <Stack spacing={2} sx={{ width: 300 }}>\n                <Autocomplete\n                    id=\"search-for-crypto\"\n                    freeSolo\n                    options={rows.map((option) => option[1])}\n                    renderInput={(params) => <TextField {...params} label=\"Search For Crypto\" onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                            const ticker = params.inputProps.value.toLowerCase();\n                            handletickerchange(ticker);\n                        }\n                    }} />}\n                />\n            </Stack>\n            <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n                <TableContainer sx={{ maxHeight: 440 }}>\n                    <Table stickyHeader aria-label=\"Crypto Table\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((column) => (\n                                    <TableCell\n                                        key={column.id}\n                                        align={column.align}\n                                        style={{ minWidth: column.minWidth }}\n                                    >\n                                        {column.label}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    return (\n                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}\n                                            currentticker={currentticker} handletickerchange={handletickerchange} onClick={(event) => {\n                                                event.preventDefault();\n                                                handletickerchange(row[1]);\n                                                // handles what row is being clicked on, saves ticker to render other components, saves to context\n                                            }}>\n                                            {columns.map((column, index) => {\n                                                const value = row[index];\n                                                if (index === 3) {\n                                                    return (\n                                                        <TableCell key={index} align={column.align} onClick={(event) => {\n                                                            event.preventDefault();\n                                                            event.stopPropagation();\n                                                            handletickerchange(row[1]);\n                                                            // console.log(row[1] + \" button clicked\");\n                                                            setPrice(row[2]);\n                                                            handleOpen(true);\n                                                        }}>\n                                                            {column.format && typeof value === 'number'\n                                                                ? column.format(value)\n                                                                : value}\n                                                        </TableCell>\n                                                    );\n                                                }\n                                                return (\n                                                    <TableCell key={index} align={column.align}>\n                                                        {column.format && typeof value === 'number'\n                                                            ? column.format(value)\n                                                            : value}\n                                                    </TableCell>\n                                                );\n                                            })}\n                                        </TableRow>\n                                    );\n                                })}\n                        </TableBody>\n                    </Table>\n\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n            </Paper>\n            <Link color=\"primary\" target=\"_blank\" href=\"https://coinmarketcap.com/\" sx={{ mt: 3 }}>\n                See more Cryptos\n            </Link>\n        </React.Fragment>\n    );\n}","import * as React from 'react';\n// import { useEffect } from 'react';\n\nimport '../styles/Graph.css';\n\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto'; // needs to be here in order for the graph to load.\n\nimport { useQuery } from '@apollo/client';\nimport { GET_CRYPTOCANDLES } from '../utils/queries';\nimport { useCryptoContext } from '../utils/CryptoContext';\n// import { hourTimeInterval, sixHourTimeInterval, dayTimeInterval, weekTimeInterval } from '../utils/timeHelpers';\nimport { sixHourTimeInterval } from '../utils/timeHelpers';\n\n\n// function preventDefault(event) {\n//     event.preventDefault();\n// }\n\nexport default function Graph() {\n    const { currentticker } = useCryptoContext();\n    // const { currentticker, handletickerchange } = useCryptoContext(); // possibly need handletickerchange\n\n\n    const { loading, data } = useQuery(GET_CRYPTOCANDLES, {\n        variables: { pair: currentticker }\n    });\n    let titleLabel = currentticker.toUpperCase() + \" (price over the past week)\";\n\n    // TODO: ADD TOGGLE FOR TIMESCALES\n    let info = [];\n    if (loading) {\n        console.log('loading graph..');\n    } else {\n        // info = data.cryptoCandles.cryptoInfo.last_day;\n        info = data.cryptoCandles.cryptoInfo.last_week;\n        // info = data.cryptoCandles.cryptoInfo.last_year;\n    }\n\n    // let xLabels = hourTimeInterval(graphDataPoints));\n    let xLabels = sixHourTimeInterval(info);\n    // let xLabels = weekTimeInterval(graphDataPoints);\n\n    return (\n        <div className=\"graph-container\">\n            <div className=\"graph-card\" >\n                <Line\n                    datasetIdKey='id'\n                    data={{\n                        labels: xLabels,\n                        datasets: [{\n                            data: info,\n                            fill: false,\n                            borderColor: 'rgb(175, 92, 192)',\n                            tension: 0.1,\n                            pointStyle: false,\n                        }],\n                    }}\n                    options={{\n                        radius: 0,\n                        responsive: true,\n                        aspectRatio: 2,\n                        plugins: {\n                            title: {\n                                display: true,\n                                text: titleLabel\n                            },\n                            legend: {\n                                display: false,\n                            }\n                        },\n                        scales: {\n                            x: {\n                                display: false,\n                            },\n                            y: {\n                                title: {\n                                    display: false,\n                                    text: 'Value in USD',\n                                    font: {\n                                        size: 11\n                                    }\n                                },\n                                display: true,\n                                ticks: {\n                                    font: {\n                                        size: 10\n                                    }\n                                },\n                            },\n                        },\n                        interaction: { // allows for hover bubble\n                            intersect: false,\n                            backgroundColor: 'rgba(0, 0, 0, 0.57)',\n                        },\n                    }}\n                />\n            </div>\n        </div>\n    );\n}\n\n\n\n// https://react-chartjs-2.netlify.app/docs/working-with-datasets\n// https://www.chartjs.org/docs/latest/charts/line.html\n","import moment from 'moment';\n\nexport function hourTimeInterval(graphDataPoints) {\n    var intervalLabels = [];\n    let timeStart = moment();\n    for (var i = 0; i < graphDataPoints.length; i++) {\n        let unixT = (timeStart - (i * 3600000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\n        let timePoint = moment(unixT).format(\"MMM-DD-YYYY, HH:00\");\n        intervalLabels.push(timePoint);\n    }\n    return intervalLabels.reverse();\n}\n\nexport function sixHourTimeInterval(graphDataPoints) {\n    var intervalLabels = [];\n    let timeStart = moment();\n    for (var i = 0; i < graphDataPoints.length; i++) {\n        let unixT = (timeStart - (i * 21600000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\n        let timePoint = moment(unixT).format(\"MMM-DD-YYYY, HH:00:00\");\n        intervalLabels.push(timePoint);\n    }\n    return intervalLabels.reverse();\n}\n\nexport function dayTimeInterval(history) {\n    var intervalLabels = [];\n    let timeStart = moment();\n    for (var i = 0; i < history.length; i++) {\n        let unixT = (timeStart - (i * 86400000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\n        let timePoint = moment(unixT).format(\"M-D-YYYY\");\n        intervalLabels.push(timePoint);\n    }\n    return intervalLabels.reverse();\n}\n\nexport function weekTimeInterval(history) {\n    var intervalLabels = [];\n    let timeStart = moment();\n    for (var i = 0; i < history.length; i++) {\n        let unixT = (timeStart - (i * 604800000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\n        let timePoint = moment(unixT).format(\"M-D-YYYY\");\n        intervalLabels.push(timePoint);\n    }\n    return intervalLabels.reverse();\n}","import * as React from 'react';\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport Title from './Title';\nimport { useQuery } from '@apollo/client';\nimport { GET_CRYPTODETAILS, GET_PORTFOLIO, GET_ME } from '../utils/queries';\n\nimport { useCryptoContext } from '../utils/CryptoContext';\n\n\n// gridType is either \"my\" or \"all\"\nexport default function InfoTab({ gridType }) {\n    const { currentticker } = useCryptoContext();\n    // const { currentticker, handletickerchange } = useCryptoContext(); // possibly need handletickerchange\n\n    // CRYPTO DETAILS QUERY\n    const { loading: cryptoDetails_loading, data: cryptoDetails_data } = useQuery(GET_CRYPTODETAILS, {\n        variables: { pair: currentticker }\n    });\n\n    const { loading: getme_loading, data: getme_data } = useQuery(GET_ME);\n\n    let un; //checks username -> profile username\n\n    if (getme_data) {\n        un = getme_data.me.username;\n        // console.log(un)\n    }\n\n    // Grabs portfolio data\n    const { loading, data } = useQuery(GET_PORTFOLIO, {\n        variables: { name: un }\n    });\n\n    // CRYPTO DETAILS LOADING\n    let info = 'Loading';\n    if (cryptoDetails_loading) {\n        console.log('loading info tab..');\n    } else {\n        info = cryptoDetails_data.cryptoDetails.cryptoInfo;\n    }\n    let url = `https://cryptowat.ch/charts/COINBASE-PRO:${currentticker}-USD`\n\n    // PORTFOLIO LOADING\n    let curUSDbalance;\n    if (loading) {\n        console.log('loading portfolio data..');\n    } else {\n        curUSDbalance = data.getPortfolio.usdBalance;\n        // console.log(curUSDbalance);\n    }\n\n\n\n\n\n\n    return (\n        <React.Fragment>\n            <Title>{gridType === \"all\"\n                ? currentticker.toUpperCase()\n                : \"My Portfolio\"}</Title>\n            {\n                gridType === \"all\"\n                    ?\n                    // Crypto info\n                    <div><Typography component=\"p\">\n                        Daily Change: {info.dailyChange}%\n                    </Typography>\n                        <Typography component=\"p\">\n                            Weekly Change: {info.weeklyChange}%\n                        </Typography>\n                        <Typography component=\"p\">\n                            Yearly Change: {info.yearlyChange}%\n                            {/* TODO change later */}\n                        </Typography>\n                        <Typography component=\"p\">\n                            52-Wk High: ${info.yearly_high}\n                        </Typography>\n                        <Typography component=\"p\">\n                            52-Wk Low: ${info.yearly_low}\n                        </Typography></div>\n                    :\n                    // Portfolio info\n                    <div>\n                        <Typography component=\"h4\">\n                            Current USD available:\n                            $ {curUSDbalance}\n                        </Typography>\n                    </div>\n            }\n            {/* add a chart pie chart hereinstead of the value */}\n            <Typography color=\"text.secondary\" sx={{ flex: 1 }}>\n                on {new Date().toDateString()}\n            </Typography>\n            <div>\n                {/* https://www.coinbase.com/price/bitcoin, format to make href like this */}\n                <Link color=\"primary\" href={url} target=\"_blank\" >\n                    Buy Real Coin\n                </Link>\n            </div>\n        </React.Fragment>\n    );\n}","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport SwipeableViews from 'react-swipeable-views';\nimport { useTheme } from '@mui/material/styles';\nimport AppBar from '@mui/material/AppBar';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport CryptoGrid from './CryptoGrid';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`,\n  };\n}\n\nexport default function PortfolioTabs({gridType, handleGridType}) {\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    if(newValue === 0)\n    {\n      handleGridType(\"my\");\n    }\n    else{\n      handleGridType(\"all\")\n    }\n    setValue(newValue);\n  };\n\n  const handleChangeIndex = (index) => {\n\n    setValue(index);\n  };\n\n\n  return (\n    <Box sx={{ bgcolor: 'background.paper' }}>\n      <AppBar position=\"static\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"secondary\"\n          textColor=\"inherit\"\n          variant=\"fullWidth\"\n          aria-label=\"full width tabs example\"\n        >\n          <Tab label=\"My Cryptos\" {...a11yProps(0)}/>\n          <Tab label=\"Browse Cryptos\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n        <TabPanel value={value} index={0} dir={theme.direction}>\n            <CryptoGrid gridType={gridType}/>\n        </TabPanel>\n        <TabPanel value={value} index={1} dir={theme.direction}>\n            <CryptoGrid gridType={gridType}/>\n        </TabPanel>\n\n      </SwipeableViews>\n    </Box>\n  );\n}","import '../styles/dashboard.css';\n\nimport * as React from 'react';\nimport { CryptoProvider } from '../utils/CryptoContext';\nimport { GET_CRYPTOINFO, GET_CRYPTOCANDLES } from '../utils/queries';\nimport { UPDATE_BALANCE } from '../utils/mutations'\nimport { useQuery, useMutation } from '@apollo/client'\nimport Auth from '../utils/auth';\n\n\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\nimport Badge from '@mui/material/Badge';\nimport Box from '@mui/material/Box';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Divider from '@mui/material/Divider';\nimport Grid from '@mui/material/Grid';\nimport IconButton from '@mui/material/IconButton';\nimport Link from '@mui/material/Link';\nimport List from '@mui/material/List';\nimport LogoutIcon from '@mui/icons-material/Logout';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport MuiDrawer from '@mui/material/Drawer';\nimport MuiAppBar from '@mui/material/AppBar';\nimport Paper from '@mui/material/Paper';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nimport { mainListItems } from '../components/listItems';\nimport CryptoGrid from '../components/CryptoGrid';\nimport Graph from '../components/Graph';\nimport InfoTab from '../components/InfoTab';\nimport PortfolioTabs from '../components/PortfolioTabs';\nimport SecondaryListItems from '../components/listItems';\n\nfunction Copyright(props) {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n            {'Copyright © '}\n\n            <Link color=\"inherit\" target=\"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\n                cryptocraft\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst drawerWidth = 240;\nconst AppBar = styled(MuiAppBar, {\n    shouldForwardProp: (prop) => prop !== 'open',\n})(({ theme, open }) => ({\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n    }),\n    ...(open && {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    }),\n}));\n\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\n    ({ theme, open }) => ({\n        '& .MuiDrawer-paper': {\n            position: 'relative',\n            whiteSpace: 'nowrap',\n            width: drawerWidth,\n            transition: theme.transitions.create('width', {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n            boxSizing: 'border-box',\n            ...(!open && {\n                overflowX: 'hidden',\n                transition: theme.transitions.create('width', {\n                    easing: theme.transitions.easing.sharp,\n                    duration: theme.transitions.duration.leavingScreen,\n                }),\n                width: theme.spacing(7),\n                [theme.breakpoints.up('sm')]: {\n                    width: theme.spacing(9),\n                },\n            }),\n        },\n    }),\n);\n\nconst mdTheme = createTheme();\n\nfunction PortfolioContent() {\n    const [open, setOpen] = React.useState(false);\n    const [gridType, setGridType] = React.useState(\"my\");\n    const toggleDrawer = () => {\n        setOpen(!open);\n    };\n    const logout = (event) => {\n        event.preventDefault();\n        Auth.logout();\n    }\n\n    const handleGridType = (type) => {\n        console.log(gridType, \"changed to\", type);\n        setGridType(type);\n    };\n\n    return (\n        <CryptoProvider>\n            <ThemeProvider theme={mdTheme}>\n                <Box sx={{ display: 'flex' }}>\n                    <CssBaseline />\n                    <AppBar position=\"absolute\" open={open}>\n                        <Toolbar\n                            sx={{\n                                pr: '24px',\n                            }}\n                        >\n                            <IconButton\n                                edge=\"start\"\n                                color=\"inherit\"\n                                aria-label=\"open drawer\"\n                                onClick={toggleDrawer}\n                                sx={{\n                                    marginRight: '36px',\n                                    ...(open && { display: 'none' }),\n                                }}\n                            >\n                                <MenuIcon />\n                            </IconButton>\n                            <Typography\n                                component=\"h1\"\n                                variant=\"h6\"\n                                color=\"inherit\"\n                                noWrap\n                                sx={{ flexGrow: 1 }}\n                            >\n                                Portfolio\n                            </Typography>\n                            <IconButton color=\"inherit\" onClick={logout}>\n                                <Badge color=\"secondary\">\n                                    <LogoutIcon />\n                                </Badge>\n                            </IconButton>\n                        </Toolbar>\n                    </AppBar>\n                    <Drawer variant=\"permanent\" open={open}>\n                        <Toolbar\n                            sx={{\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'flex-end',\n                                px: [1],\n                            }}\n                        >\n                            <IconButton onClick={toggleDrawer}>\n                                <ChevronLeftIcon />\n                            </IconButton>\n                        </Toolbar>\n                        <Divider />\n                        <List>{mainListItems}</List>\n                        <Divider />\n                        <List>{SecondaryListItems()}</List>\n                    </Drawer>\n                    <Box\n                        component=\"main\"\n                        sx={{\n                            backgroundColor: (theme) =>\n                                theme.palette.mode === 'light'\n                                    ? theme.palette.grey[100]\n                                    : theme.palette.grey[900],\n                            flexGrow: 1,\n                            height: '100vh',\n                            overflow: 'auto',\n                        }}\n                    >\n                        <Toolbar />\n                        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n                            <Grid container spacing={3}>\n                                {/* Chart */}\n                                <Grid item xs={12} md={8} lg={9}>\n                                    <Paper className=\"graph-paper\"\n                                        sx={{\n                                            p: 2,\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                        }}\n                                    >\n                                        <Graph />\n                                    </Paper>\n                                </Grid>\n                                <Grid item xs={12} md={4} lg={3}>\n                                    <Paper className=\"stats-paper\"\n                                        sx={{\n                                            p: 2,\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                        }}\n                                    >\n                                        <InfoTab gridType={gridType} handleGridType = {handleGridType}/>\n                                    </Paper>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <PortfolioTabs gridType={gridType} handleGridType = {handleGridType} />\n                                </Grid>\n                            </Grid>\n                            <Copyright sx={{ pt: 4 }} />\n                        </Container>\n                    </Box>\n                </Box>\n            </ThemeProvider>\n        </CryptoProvider>\n    );\n}\n\nexport default function Portfolio() {\n    return <PortfolioContent />;\n}","import '../styles/dashboard.css';\n\nimport * as React from 'react';\n// import { useEffect } from 'react';\nimport { CryptoProvider } from '../utils/CryptoContext';\n// import { GET_CRYPTOINFO, GET_CRYPTOCANDLES } from '../utils/queries';\nimport { useQuery } from '@apollo/client'\n// import { useQuery, useMutation } from '@apollo/client'\nimport Auth from '../utils/auth';\n\n\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\nimport Badge from '@mui/material/Badge';\nimport Box from '@mui/material/Box';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Divider from '@mui/material/Divider';\nimport Grid from '@mui/material/Grid';\nimport IconButton from '@mui/material/IconButton';\nimport Link from '@mui/material/Link';\nimport List from '@mui/material/List';\nimport LogoutIcon from '@mui/icons-material/Logout';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport MuiDrawer from '@mui/material/Drawer';\nimport MuiAppBar from '@mui/material/AppBar';\nimport Paper from '@mui/material/Paper';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nimport { mainListItems } from '../components/listItems';\nimport CryptoGrid from '../components/CryptoGrid';\nimport Graph from '../components/Graph';\nimport InfoTab from '../components/InfoTab';\nimport SecondaryListItems from '../components/listItems';\n\nimport { GET_ME } from '../utils/queries';\n\nfunction Copyright(props) {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n            {'Copyright © '}\n\n            <Link color=\"inherit\" target=\"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\n                cryptocraft\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst drawerWidth = 240;\nconst AppBar = styled(MuiAppBar, {\n    shouldForwardProp: (prop) => prop !== 'open',\n})(({ theme, open }) => ({\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n    }),\n    ...(open && {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    }),\n}));\n\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\n    ({ theme, open }) => ({\n        '& .MuiDrawer-paper': {\n            position: 'relative',\n            whiteSpace: 'nowrap',\n            width: drawerWidth,\n            transition: theme.transitions.create('width', {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n            boxSizing: 'border-box',\n            ...(!open && {\n                overflowX: 'hidden',\n                transition: theme.transitions.create('width', {\n                    easing: theme.transitions.easing.sharp,\n                    duration: theme.transitions.duration.leavingScreen,\n                }),\n                width: theme.spacing(7),\n                [theme.breakpoints.up('sm')]: {\n                    width: theme.spacing(9),\n                },\n            }),\n        },\n    }),\n);\n\nconst mdTheme = createTheme();\n\nfunction DashboardContent() {\n    const [open, setOpen] = React.useState(false);\n    const [gridType, setGridType] = React.useState(\"all\");\n    const toggleDrawer = () => {\n        setOpen(!open);\n    };\n    const logout = (event) => {\n        event.preventDefault();\n        Auth.logout();\n    }\n    const handleGridType = (type) => {\n        console.log(gridType, \"changed to\", type);\n        setGridType(type);\n    };\n\n    const { loading, data } = useQuery(GET_ME);\n\n    // if (data) console.log(data);\n\n\n    return (\n        <CryptoProvider>\n            <ThemeProvider theme={mdTheme}>\n                <Box sx={{ display: 'flex' }}>\n                    <CssBaseline />\n                    <AppBar position=\"absolute\" open={open}>\n                        <Toolbar\n                            sx={{\n                                pr: '24px',\n                            }}\n                        >\n                            <IconButton\n                                edge=\"start\"\n                                color=\"inherit\"\n                                aria-label=\"open drawer\"\n                                onClick={toggleDrawer}\n                                sx={{\n                                    marginRight: '36px',\n                                    ...(open && { display: 'none' }),\n                                }}\n                            >\n                                <MenuIcon />\n                            </IconButton>\n                            <Typography\n                                component=\"h1\"\n                                variant=\"h6\"\n                                color=\"inherit\"\n                                noWrap\n                                sx={{ flexGrow: 1 }}\n                            >\n                                Dashboard\n                            </Typography>\n                            <IconButton color=\"inherit\" onClick={logout}>\n                                <Badge color=\"secondary\">\n                                    <LogoutIcon />\n                                </Badge>\n                            </IconButton>\n                        </Toolbar>\n                    </AppBar>\n                    <Drawer variant=\"permanent\" open={open}>\n                        <Toolbar\n                            sx={{\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'flex-end',\n                                px: [1],\n                            }}\n                        >\n                            <IconButton onClick={toggleDrawer}>\n                                <ChevronLeftIcon />\n                            </IconButton>\n                        </Toolbar>\n                        <Divider />\n                        <List>{mainListItems}</List>\n                        <Divider />\n                        <List>{SecondaryListItems()}</List>\n                    </Drawer>\n                    <Box\n                        component=\"main\"\n                        sx={{\n                            backgroundColor: (theme) =>\n                                theme.palette.mode === 'light'\n                                    ? theme.palette.grey[100]\n                                    : theme.palette.grey[900],\n                            flexGrow: 1,\n                            height: '100vh',\n                            overflow: 'auto',\n                        }}\n                    >\n                        <Toolbar />\n                        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n                            <Grid container spacing={3}>\n                                {/* Chart */}\n                                <Grid item xs={12} md={8} lg={9}>\n                                    <Paper className=\"graph-paper\"\n                                        sx={{\n                                            p: 2,\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                        }}\n                                    >\n                                        <Graph />\n                                    </Paper>\n                                </Grid>\n                                <Grid item xs={12} md={4} lg={3}>\n                                    <Paper className=\"stats-paper\"\n                                        sx={{\n                                            p: 2,\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                        }}\n                                    >\n                                        <InfoTab gridType={gridType} handleGridType = {handleGridType}/>\n                                    </Paper>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Paper id=\"dashboard-table-container\" sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\n                                        <CryptoGrid gridType={gridType} handleGridType = {handleGridType}/>\n                                    </Paper>\n                                </Grid>\n                            </Grid>\n                            <Copyright sx={{ pt: 4 }} />\n                        </Container>\n                    </Box>\n                </Box>\n            </ThemeProvider>\n        </CryptoProvider>\n    );\n}\n\nexport default function Dashboard() {\n    return <DashboardContent />;\n}\n","import React from 'react';\nimport '../styles/error.css';\nconst Error = () => {\n    return (\n        <div id=\"error-container\">\n            <img id = \"mc-error\" src=\"https://fontmeme.com/permalink/211204/5d09fcbff63c28a89211008a437fa8c7.png\" alt=\"minecraft-evenings-font\" border=\"0\"></img>\n        </div>\n\n    );\n}\nexport default Error;","import * as React from 'react';\n\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nimport '../styles/login.css';\n\nimport { useState } from 'react';\n\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Copyright(props) {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n            {'Copyright © '}\n            <Link color=\"inherit\" target = \"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\n                cryptocraft\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst theme = createTheme();\n\nexport default function SignUp() {\n    const [formState, setFormState] = useState({\n        username: '',\n        firstName: '',\n        lastName: '',\n        password: ''\n    })\n\n    const [addUser, { error, data }] = useMutation(ADD_USER);\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        setFormState({\n            ...formState,\n            [name]: value\n        })\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            const { data } = await addUser({\n                variables: { ...formState }\n            })\n            Auth.login(data.addUser.token);\n        } catch (e) {\n            console.log(e)\n        }\n    };\n\n    const divStyle = {\n        backgroundColor: 'rgb(202, 102, 122)',\n        borderRadius: '3px',\n        color: 'white',\n        textAlign: 'center'\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container className = \"signin-container\" component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign up\n                    </Typography>\n                    <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    name=\"firstName\"\n                                    required\n                                    fullWidth\n                                    id=\"firstName\"\n                                    label=\"First Name\"\n                                    autoFocus\n                                    value={formState.firstName}\n                                    onChange={handleChange}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    id=\"lastName\"\n                                    label=\"Last Name\"\n                                    name=\"lastName\"\n                                    value={formState.lastName}\n                                    onChange={handleChange}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    id=\"username\"\n                                    label=\"Username\"\n                                    name=\"username\"\n                                    value={formState.username}\n                                    onChange={handleChange}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    value={formState.password}\n                                    onChange={handleChange}\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                        >\n                            Sign Up\n                        </Button>\n                        <Grid container justifyContent=\"flex-end\">\n                            <Grid item>\n                                <Link href=\"/login\" variant=\"body2\">\n                                    Already have an account? Log in\n                                </Link>\n                            </Grid>\n                        </Grid>\n                        {error && (\n                            <div className=\"my-3 p-1\" style={divStyle}>\n                                {'Try another username and/or password (password must be at least 8 characters)'}\n                            </div>\n                        )}\n                    </Box>\n                </Box>\n                <Copyright sx={{ mt: 5 }} />\n            </Container>\n        </ThemeProvider>\n    );\n}","import * as React from 'react';\nimport { useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\nimport '../styles/login.css';\n\n\n\nfunction Copyright(props) {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n            {'Copyright © '}\n            <Link color=\"inherit\" target = \"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\n                cryptocraft\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst theme = createTheme();\n\nconst LogIn = (props) => {\n    const [formState, setFormState] = useState({\n        username: '', password: ''\n    });\n    const [login, { error, data }] = useMutation(LOGIN_USER);\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        setFormState({\n            ...formState,\n            [name]: value\n        })\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            const { data } = await login({\n                variables: { ...formState }\n            })\n            Auth.login(data.login.token)\n        } catch (e) {\n            console.error(e)\n        }\n\n        setFormState({\n            username: '',\n            password: ''\n        })\n    };\n\n    const divStyle = {\n        backgroundColor: 'rgb(202, 102, 122)',\n        borderRadius: '3px',\n        color: 'white',\n        textAlign: 'center'\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container className = \"signin-container\" component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Log in\n                    </Typography>\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"username\"\n                            label=\"Username\"\n                            name=\"username\"\n                            autoFocus\n                            value={formState.username}\n                            onChange={handleChange}\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            value={formState.password}\n                            onChange={handleChange}\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                        >\n                            Log In\n                        </Button>\n                        <Grid container>\n                            <Grid item>\n                                <Link href=\"/signup\" variant=\"body2\">\n                                    {\"Don't have an account? Sign Up\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                        {error && (\n                            <div className=\"my-3 p-1\" style={divStyle}>\n                                {error.message}\n                            </div>\n                        )}\n                    </Box>\n                </Box>\n                <Copyright sx={{ mt: 8, mb: 4 }} />\n            </Container>\n        </ThemeProvider>\n    );\n}\n\nexport default LogIn;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport Portfolio from './pages/Portfolio';\nimport Dashboard from './pages/Dashboard';\nimport Error from './pages/Error';\nimport SignUp from './pages/Signup';\nimport LogIn from './pages/Login';\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  const isLoggedIn = localStorage.getItem('id_token');\n  let redirect;\n\n  if (isLoggedIn === null && window.location.pathname !== '/signup') {\n    redirect = <Redirect to='/login'/>\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          {redirect}\n          <Switch>\n            <Route exact path=\"/\" component={Dashboard} />\n            <Route exact path=\"/login\" component={LogIn} />\n            <Route exact path=\"/signup\" component={SignUp} />\n            {/* TODO change routing */}\n            <Route exact path=\"/portfolio\" component={Portfolio} />\n            <Route exact path=\"/me\" component={Dashboard} />\n            <Route component={Error} />\n          </Switch>\n        </div>\n      </Router>\n    </ApolloProvider >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}