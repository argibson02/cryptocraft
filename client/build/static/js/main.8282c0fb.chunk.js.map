{"version":3,"sources":["utils/CryptoContext.js","utils/queries.js","utils/mutations.js","utils/auth.js","components/listItems.js","components/Title.js","components/Transaction.js","components/CryptoGrid.js","components/Graph.js","utils/timeHelpers.js","components/InfoTab.js","components/PortfolioTabs.js","pages/Portfolio.js","pages/Dashboard.js","pages/Error.js","pages/Signup.js","pages/Login.js","App.js","index.js"],"names":["CryptoContext","createContext","useCryptoContext","useContext","CryptoProvider","children","useState","currentticker","setCurrentTicker","Provider","value","handletickerchange","ticker","GET_ME","gql","GET_PORTFOLIO","GET_CRYPTOINFO","GET_CRYPTOCANDLES","GET_CRYPTODETAILS","LOGIN_USER","ADD_USER","BUY_CRYPTO","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","mainListItems","Link","href","className","ListItem","button","ListItemIcon","ListItemText","primary","SecondaryListItems","ListSubheader","inset","onClick","Title","props","Typography","component","variant","color","gutterBottom","Transaction","un","open","handleOpen","action","price","React","transactionType","setTransactionType","amount","setAmount","ptf","setPtf","useMutation","buyCrypto","useQuery","getme_data","loading","data","me","username","curUSDbalance","curCryptos","variables","name","getPortfolio","usdBalance","cryptos","total","handleClose","handleBuy","event","a","preventDefault","console","log","alert","quantity","investment","mutationResponse","handleSell","sum","forEach","element","toString","Dialog","onClose","DialogTitle","DialogContent","Box","noValidate","sx","display","flexDirection","m","width","DialogContentText","Select","autoFocus","onChange","target","label","fullWidth","inputProps","id","MenuItem","TextField","margin","type","required","defaultValue","DialogActions","Button","CryptoGrid","gridType","columns","minWidth","align","page","setPage","rowsPerPage","setRowsPerPage","setOpen","setPrice","getportfolio_data","map","Map","has","set","get","entries","getButton","createData","btn","rows","temp","i","cryptoData","cryptoInfo","length","slice","push","toFixed","bool","Stack","spacing","Autocomplete","freeSolo","options","option","renderInput","params","onKeyDown","e","key","toLowerCase","Paper","overflow","TableContainer","maxHeight","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","style","TableBody","row","index","hover","role","tabIndex","stopPropagation","format","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","mt","Graph","pair","titleLabel","toUpperCase","info","cryptoCandles","last_week","xLabels","graphDataPoints","intervalLabels","timeStart","moment","unixT","timePoint","reverse","sixHourTimeInterval","datasetIdKey","labels","datasets","fill","borderColor","tension","pointStyle","radius","responsive","aspectRatio","plugins","title","text","legend","scales","x","y","font","size","ticks","interaction","intersect","backgroundColor","InfoTab","cryptoDetails_loading","cryptoDetails_data","cryptoDetails","url","dailyChange","weeklyChange","yearlyChange","yearly_high","yearly_low","flex","toDateString","TabPanel","other","hidden","aria-labelledby","p","a11yProps","PortfolioTabs","handleGridType","theme","useTheme","setValue","bgcolor","AppBar","position","Tabs","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","Copyright","getFullYear","styled","MuiAppBar","shouldForwardProp","prop","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","enteringScreen","Drawer","MuiDrawer","whiteSpace","boxSizing","overflowX","breakpoints","up","mdTheme","createTheme","PortfolioContent","setGridType","toggleDrawer","ThemeProvider","CssBaseline","Toolbar","pr","IconButton","edge","marginRight","noWrap","flexGrow","Auth","logout","Badge","alignItems","justifyContent","px","Divider","List","palette","mode","grey","height","Container","maxWidth","mb","Grid","container","item","xs","md","lg","pt","Portfolio","DashboardContent","Dashboard","Error","src","alt","border","SignUp","firstName","lastName","password","formState","setFormState","addUser","error","handleChange","handleSubmit","login","marginTop","Avatar","onSubmit","sm","borderRadius","textAlign","LogIn","message","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","redirect","pathname","to","ApolloProvider","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8282c0fb.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst CryptoContext = createContext();\r\n\r\nexport const useCryptoContext = () => useContext(CryptoContext);\r\n\r\nexport const CryptoProvider = ({ children }) => {\r\n    const [currentticker, setCurrentTicker] = useState('btc');\r\n\r\n  const handletickerchange = (ticker) => {\r\n    setCurrentTicker(ticker);\r\n}\r\n\r\n  return (\r\n    <CryptoContext.Provider\r\n      value={{ currentticker, handletickerchange }}\r\n    >\r\n      {children}\r\n    </CryptoContext.Provider>\r\n  );\r\n};\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const GET_ME = gql`\r\n    query me {\r\n        me {\r\n            _id\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_PORTFOLIO = gql`\r\n    query getPortfolio ($name: String) {\r\n        getPortfolio (name: $name) {\r\n            name\r\n            usdBalance\r\n            cryptos {\r\n                ticker\r\n                quantity\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_CRYPTOINFO = gql`\r\n    query cryptoData {\r\n        cryptoData {\r\n            cryptoInfo\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_CRYPTOCANDLES = gql`\r\n    query cryptoCandles ($pair: String) {\r\n        cryptoCandles(pair: $pair) {\r\n            cryptoInfo\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_CRYPTODETAILS = gql`\r\n    query cryptoDetails ($pair : String) { \r\n        cryptoDetails(pair: $pair) {\r\n            cryptoInfo\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n    mutation login($username: String!, $password: String!) {\r\n        login(username: $username, password: $password) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($username: String!, $firstName: String!, $lastName: String!, $password: String!) {\r\n        addUser(username: $username, firstName: $firstName, lastName: $lastName, password: $password) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n// export const ADD_PORTFOLIO = gql`\r\n//     mutation addPortfolio($name: String, $usdBalance: Float!) {\r\n//         addPortfolio(name: $name, usdBalance: $usdBalance) {\r\n//             name\r\n//             usdBalance\r\n//         }\r\n//     }\r\n// `;\r\n\r\nexport const ADD_PORTFOLIO = gql`\r\n    mutation addPortfolio($name: String, $usdBalance: Float!) {\r\n        addPortfolio(name: $name, usdBalance: $usdBalance) {\r\n            name\r\n            usdBalance\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_BALANCE = gql`\r\n    mutation updateBalance($name: String!) {\r\n        updateBalance(name: $name) {\r\n            historicalBalance\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport const BUY_CRYPTO = gql`\r\n    mutation buyCrypto($name: String!, $ticker: String!, $quantity: Float!, $investment: String!) {\r\n        buyCrypto(name: $name, ticker: $ticker, quantity: $quantity, investment: $investment) {\r\n            cryptos {\r\n                ticker\r\n                quantity\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n// sell crypto mutation here","// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import * as React from 'react';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport DashboardIcon from '@mui/icons-material/Dashboard';\r\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\r\nimport PeopleIcon from '@mui/icons-material/People';\r\nimport BarChartIcon from '@mui/icons-material/BarChart';\r\nimport AssignmentIcon from '@mui/icons-material/Assignment';\r\n\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Link from '@mui/material/Link'\r\n\r\nimport { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_PORTFOLIO } from '../utils/mutations';\r\n\r\nexport const mainListItems = (\r\n    <div>\r\n        {/* TODO make the href colors of visited not showing */}\r\n        <Link href=\"/\" className=\"sideLinks\">\r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                    <DashboardIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Dashboard\" />\r\n            </ListItem>\r\n        </Link>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <BarChartIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Leaderboard\" />\r\n        </ListItem>\r\n    </div>\r\n);\r\n\r\n// map portfolios here\r\nexport default function SecondaryListItems() {\r\n    // const [open, setOpen] = useState(false)\r\n    // const [formState, setFormState] = useState({ name: '' });\r\n\r\n    // const [addPortfolio, { error, data }] = useMutation(ADD_PORTFOLIO);\r\n\r\n    // const handleChange = (event) => {\r\n    //     const { name, value } = event.target;\r\n\r\n    //     setFormState({\r\n    //         ...formState,\r\n    //         [name]: value\r\n    //     });\r\n    // }\r\n\r\n    const handleClickOpen = () => {\r\n\r\n    }\r\n\r\n    // const handleCancel = () => {\r\n    //     setOpen(false);\r\n    // };\r\n\r\n    // const handleAdd = async (event) => {\r\n    //     event.preventDefault();\r\n    //     console.log(formState);\r\n\r\n    //     try {\r\n    //         const { data } = await addPortfolio({\r\n    //             variables: { ...formState, usdBalance: 1000000 }\r\n    //         })\r\n    //         console.log(data)\r\n    //     } catch (e) {\r\n    //         console.error(e)\r\n    //     }\r\n\r\n    //     setFormState({ name: '' });\r\n    //     setOpen(false);\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <ListSubheader inset>Portfolios</ListSubheader>\r\n            <Link href=\"/portfolio\" className=\"sideLinks\">\r\n                <ListItem button onClick={handleClickOpen}>\r\n                    <ListItemIcon>\r\n                        <AssignmentIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Portfolio\" />\r\n                </ListItem>\r\n            </Link>\r\n\r\n            {/* <Dialog open={open} onClose={handleCancel}>\r\n                <DialogTitle>Add a new Portfolio</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Congrats, you're a millionaire! We fund each of your portfolios with $1,000,000 to start. \r\n                        See how different sets of cryptocurrencies perform with each portfolio.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        label=\"Portfolio name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        value={formState.name}\r\n                        onChange={handleChange}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCancel}>Cancel</Button>\r\n                    <Button onClick={handleAdd}>Add Portfolio</Button>\r\n                </DialogActions>\r\n            </Dialog> */}\r\n        </div>\r\n    )\r\n\r\n}","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nfunction Title(props) {\r\n    return (\r\n        <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n            {props.children}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTitle.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Title;","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport TextField from '@mui/material/TextField';\r\nimport Box from '@mui/material/Box';\r\n\r\n// import FormControl from '@mui/material/FormControl';\r\n// import FormControlLabel from '@mui/material/FormControlLabel';\r\n// import InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Select from '@mui/material/Select';\r\n// import Switch from '@mui/material/Switch';\r\n\r\n\r\nimport { useQuery } from '@apollo/client'\r\n// import { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { useCryptoContext } from '../utils/CryptoContext';\r\n\r\nimport { GET_PORTFOLIO, GET_ME } from '../utils/queries';\r\nimport { BUY_CRYPTO } from '../utils/mutations';\r\n\r\nfunction Transaction({ open, handleOpen, action, price }) {\r\n    const { currentticker } = useCryptoContext();\r\n    // const { currentticker, handletickerchange } = useCryptoContext(); // possibly need handletickerchange\r\n\r\n    const [transactionType, setTransactionType] = React.useState(action);\r\n    const [amount, setAmount] = React.useState(0);\r\n    const [ptf, setPtf] = React.useState(\"portfolio1\");\r\n\r\n    const [buyCrypto] = useMutation(BUY_CRYPTO);\r\n    // sell crypto add the mutation \r\n\r\n    const { loading: getme_loading, data: getme_data } = useQuery(GET_ME);\r\n\r\n    let un; //checks username -> profile username\r\n\r\n    if (getme_data) {\r\n        un = getme_data.me.username;\r\n        // console.log(un)\r\n    }\r\n\r\n    // Grabs portfolio data\r\n    const { data } = useQuery(GET_PORTFOLIO, {\r\n        variables: { name: un }\r\n    });\r\n    let curUSDbalance;\r\n    let curCryptos;\r\n\r\n    if (data) {\r\n        curUSDbalance = data.getPortfolio.usdBalance;\r\n        curCryptos = data.getPortfolio.cryptos;\r\n        // console.log(curCryptos)\r\n    }\r\n    //\r\n\r\n\r\n\r\n    // BUY FUNCTIONS\r\n    let total = amount / price;\r\n    // console.log(price);\r\n    const handleClose = () => {\r\n        handleOpen(false);\r\n    };\r\n\r\n    const handleTransactionType = (event) => {\r\n        setTransactionType(\r\n            event.target.value,\r\n        );\r\n    };\r\n\r\n    const handleAmountChange = (event) => {\r\n        setAmount(\r\n            event.target.value,\r\n        );\r\n\r\n        total = amount / price;\r\n\r\n    }\r\n\r\n    const handlePtfChange = (event) => {\r\n        setPtf(\r\n            event.target.value,\r\n        );\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        if(transactionType == \"buy\"){\r\n            handleBuy(event);\r\n        }\r\n        else{\r\n            handleSell(event);\r\n        }\r\n    }\r\n\r\n    const handleBuy = async (event) => {\r\n        event.preventDefault();\r\n        console.log(\"buy\");\r\n        if (amount > curUSDbalance) {\r\n            alert(\"You don't have enough money!\");\r\n            return;\r\n        }\r\n\r\n        console.log(curCryptos);\r\n        \r\n        const mutationResponse = await buyCrypto({\r\n            variables: {\r\n                name: un,\r\n                ticker: currentticker,\r\n                quantity: total,\r\n                investment: amount\r\n            }\r\n        })\r\n        console.log(\"purchase successful\");\r\n        // maybe give user feedback\r\n        handleClose();\r\n        return mutationResponse;\r\n    }\r\n\r\n    const handleSell = async (event) => {\r\n        event.preventDefault();\r\n        console.log(\"sell\");\r\n       \r\n        // check to see if the sell is valid, traverse through map to see if i have it\r\n        let sum = 0;\r\n        curCryptos.forEach(element => {\r\n            if(element.ticker == currentticker){\r\n                sum+=element.quantity;\r\n            }\r\n        });\r\n        if(sum>=total){\r\n            const mutationResponse = await buyCrypto({\r\n                variables: {\r\n                    name: un,\r\n                    ticker: currentticker,\r\n                    quantity: (total*-1),\r\n                    investment: (amount*-1).toString()\r\n                }\r\n            })\r\n            // add feedback of sell successful\r\n            handleClose();\r\n            return mutationResponse;\r\n        }\r\n        else{\r\n            alert(\"Not enough \" + currentticker +\"!\");\r\n            return;\r\n        }\r\n        // create the mutation\r\n        \r\n        // window.location.reload(); // change to state so new USD balance renders dynamically\r\n        // return mutationResponse;\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>Trade {currentticker}</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <Box\r\n                        noValidate\r\n                        component=\"form\"\r\n                        sx={{\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            m: 'auto',\r\n                            width: 'fit-content',\r\n                        }}\r\n                    >\r\n                        <DialogContentText>\r\n                            Portfolio\r\n                        </DialogContentText>\r\n                        {/* select which portfolio to buy or choose from */}\r\n                        <Select\r\n                            autoFocus\r\n                            value={ptf}\r\n                            onChange={handlePtfChange}\r\n                            label=\"Portfolio\"\r\n                            fullWidth\r\n                            inputProps={{\r\n                                name: 'ptf',\r\n                                id: 'ptf',\r\n                            }}\r\n                        >\r\n                            <MenuItem value=\"Portfolio 1\">portfolio 1</MenuItem>\r\n                            {/* list other ones here */}\r\n                        </Select>\r\n                        <DialogContentText>\r\n                            Transaction Type\r\n                        </DialogContentText>\r\n                        <Select\r\n                            value={transactionType}\r\n                            onChange={handleTransactionType}\r\n                            label=\"Transaction Type\"\r\n                            fullWidth\r\n                            inputProps={{\r\n                                name: 'transactionType',\r\n                                id: 'transactionType',\r\n                            }}\r\n                        >\r\n                            <MenuItem value=\"buy\">Buy</MenuItem>\r\n                            <MenuItem value=\"sell\">Sell</MenuItem>\r\n                        </Select>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"$\"\r\n                            type=\"number\" //or some number idk, figure out how to replace it when you click onit\r\n                            fullWidth\r\n                            required={true}\r\n                            defaultValue=\"0.00\"\r\n                            variant=\"standard\"\r\n                            onChange={handleAmountChange}\r\n                        />\r\n                        <DialogContentText>\r\n                            {total} {currentticker}\r\n                        </DialogContentText>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button onClick={handleSubmit}>{transactionType === \"buy\" ? \"Purchase\" : \"Sell\"}</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Transaction;","import * as React from 'react';\r\nimport { useQuery } from '@apollo/client'\r\n\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport Title from './Title';\r\nimport Link from '@mui/material/Link';\r\n// import Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Stack from '@mui/material/Stack';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\n\r\nimport Transaction from './Transaction';\r\nimport { useCryptoContext } from '../utils/CryptoContext';\r\nimport { GET_CRYPTOINFO, GET_PORTFOLIO, GET_ME } from '../utils/queries';\r\n\r\n\r\n\r\n// gridType will either be \"my\" or \"all\"\r\nexport default function CryptoGrid({ gridType }) {\r\n    const columns = gridType === \"all\" ? [\r\n        { id: 'name', label: 'Name', minWidth: 170 },\r\n        { id: 'ticker', label: 'Ticker', minWidth: 100 },\r\n        { id: 'price', label: 'Price\\u00a0(USD)', minWidth: 170 },\r\n        { id: 'buysell', label: 'Buy/Sell', minWidth: 100, align: 'right' }\r\n    ]\r\n        :\r\n        [{ id: 'name', label: 'Name', minWidth: 170 },\r\n        { id: 'ticker', label: 'Ticker', minWidth: 100 },\r\n        { id: 'price', label: 'Price per Coin\\u00a0(USD)', minWidth: 170 },\r\n        { id: 'quantity', label: 'Quantity', minWidth: 170 },\r\n        { id: 'investment', label: 'Total Value', minWidth: 170 },\r\n        { id: 'buysell', label: 'Buy/Sell', minWidth: 100, align: 'right' }]\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [price, setPrice] = React.useState(0)\r\n\r\n    const { currentticker, handletickerchange } = useCryptoContext();\r\n    const { loading, data } = useQuery(GET_CRYPTOINFO);\r\n    const { loading: getme_loading, data: getme_data } = useQuery(GET_ME);\r\n\r\n    let un; //checks username -> profile username\r\n\r\n    if (getme_data) {\r\n        un = getme_data.me.username;\r\n        // console.log(un)\r\n    }\r\n    let curCryptos = [];\r\n    // Grabs portfolio data\r\n    const { data: getportfolio_data } = useQuery(GET_PORTFOLIO, {\r\n        variables: { name: un }\r\n    });\r\n\r\n    console.log(getportfolio_data)\r\n    if (getportfolio_data) {\r\n        curCryptos = getportfolio_data.getPortfolio.cryptos;\r\n    }\r\n\r\n    let map = new Map();\r\n    curCryptos.forEach(element => {\r\n        // console.log(element)\r\n        if (map.has(element.ticker)) {\r\n            map.set(element.ticker, map.get(element.ticker) + element.quantity);\r\n        } else {\r\n            map.set(element.ticker, element.quantity);\r\n        }\r\n    });\r\n\r\n    const cryptoQuantities = [...map.entries()];\r\n\r\n    function getButton(ticker) {\r\n        return (\r\n            <button>Trade</button>\r\n        )\r\n    }\r\n    function createData(name, ticker, price) {\r\n        let btn = getButton(ticker);\r\n        return { name, ticker, price, btn };\r\n    }\r\n\r\n    // default seed data\r\n    var rows = [\r\n        createData('Bitcoin', 'BTC', 44000),\r\n        createData('Ethereum', 'ETH', 4080),\r\n    ];\r\n\r\n    if (loading) {\r\n        console.log('loading crypto grid...')\r\n    } else {\r\n        let temp = [];\r\n\r\n        if (gridType === \"all\") {\r\n            for (let i = 0; i < data.cryptoData.cryptoInfo.length; i++) {\r\n                temp[i] = data.cryptoData.cryptoInfo[i].slice();\r\n            }\r\n            temp.forEach(element => {\r\n                element.push(getButton(element[1]));\r\n            });\r\n        }\r\n        else {\r\n            for (let i = 0; i < data.cryptoData.cryptoInfo.length; i++) {\r\n                if(map.has(data.cryptoData.cryptoInfo[i][1]))\r\n                {\r\n                    temp[i] = data.cryptoData.cryptoInfo[i].slice();\r\n                }\r\n            }\r\n            temp.forEach(element => {\r\n                // quantity\r\n                element.push(map.get(element[1]));\r\n                // investment\r\n                let total = map.get(element[1]) * element[2];\r\n                element.push(total.toFixed(2));\r\n                element.push(getButton(element[1]));\r\n            });\r\n        }\r\n        rows = temp;\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n    const handleOpen = (bool) => setOpen(bool);\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            \r\n\r\n            <Title>{gridType === \"all\" ? \"Browse Cryptos\" : \"My Cryptos\"}</Title>\r\n            <Stack spacing={2} sx={{ width: 300 }}>\r\n                <Autocomplete\r\n                    id=\"search-for-crypto\"\r\n                    freeSolo\r\n                    options={rows.map((option) => option[1])}\r\n                    renderInput={(params) => <TextField {...params} label=\"Search For Crypto\" onKeyDown={(e) => {\r\n                        if (e.key === 'Enter') {\r\n                            const ticker = params.inputProps.value.toLowerCase();\r\n                            handletickerchange(ticker);\r\n                        }\r\n                    }} />}\r\n                />\r\n            </Stack>\r\n            <Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n                <TableContainer sx={{ maxHeight: 440 }}>\r\n                    <Table stickyHeader aria-label=\"Crypto Table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {columns.map((column) => (\r\n                                    <TableCell\r\n                                        key={column.id}\r\n                                        align={column.align}\r\n                                        style={{ minWidth: column.minWidth }}\r\n                                    >\r\n                                        {column.label}\r\n                                    </TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    return (\r\n                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}\r\n                                            currentticker={currentticker} handletickerchange={handletickerchange} onClick={(event) => {\r\n                                                event.preventDefault();\r\n                                                handletickerchange(row[1]);\r\n                                                // handles what row is being clicked on, saves ticker to render other components, saves to context\r\n                                            }}>\r\n                                            {columns.map((column, index) => {\r\n                                                const value = row[index];\r\n                                                if (index === 3 && gridType === \"all\") {\r\n                                                    return (\r\n                                                        <TableCell key={index} align={column.align} onClick={(event) => {\r\n                                                            event.preventDefault();\r\n                                                            event.stopPropagation();\r\n                                                            handletickerchange(row[1]);\r\n                                                            console.log(row[1] + \" button clicked\");\r\n                                                            setPrice(row[2]);\r\n                                                            handleOpen(true);\r\n                                                        }}>\r\n                                                            {column.format && typeof value === 'number'\r\n                                                                ? column.format(value)\r\n                                                                : value}\r\n                                                        </TableCell>\r\n                                                    );\r\n                                                }\r\n                                                else if(index === 5 && gridType === \"my\"){\r\n                                                    return (\r\n                                                        <TableCell key={index} align={column.align} onClick={(event) => {\r\n                                                            event.preventDefault();\r\n                                                            event.stopPropagation();\r\n                                                            handletickerchange(row[1]);\r\n                                                            console.log(row[1] + \" button clicked\");\r\n                                                            setPrice(row[2]);\r\n                                                            handleOpen(true);\r\n                                                        }}>\r\n                                                            {column.format && typeof value === 'number'\r\n                                                                ? column.format(value)\r\n                                                                : value}\r\n                                                        </TableCell>\r\n                                                    );\r\n                                                }\r\n                                                return (\r\n                                                    <TableCell key={index} align={column.align}>\r\n                                                        {column.format && typeof value === 'number'\r\n                                                            ? column.format(value)\r\n                                                            : value}\r\n                                                    </TableCell>\r\n                                                );\r\n                                            })}\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                        </TableBody>\r\n                    </Table>\r\n\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            <div>\r\n                {open\r\n                    ? <Transaction open={open} handleOpen={handleOpen} action={\"buy\"} price={price} />\r\n                    : <div></div>\r\n                }\r\n            </div>\r\n            <Link color=\"primary\" target=\"_blank\" href=\"https://coinmarketcap.com/\" sx={{ mt: 3 }}>\r\n                See more Cryptos\r\n            </Link>\r\n        </React.Fragment>\r\n    );\r\n}","import * as React from 'react';\r\n// import { useEffect } from 'react';\r\n\r\nimport '../styles/Graph.css';\r\n\r\nimport { Line } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto'; // needs to be here in order for the graph to load.\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_CRYPTOCANDLES } from '../utils/queries';\r\nimport { useCryptoContext } from '../utils/CryptoContext';\r\n// import { hourTimeInterval, sixHourTimeInterval, dayTimeInterval, weekTimeInterval } from '../utils/timeHelpers';\r\nimport { sixHourTimeInterval } from '../utils/timeHelpers';\r\n\r\n\r\n// function preventDefault(event) {\r\n//     event.preventDefault();\r\n// }\r\n\r\nexport default function Graph() {\r\n    const { currentticker } = useCryptoContext();\r\n    // const { currentticker, handletickerchange } = useCryptoContext(); // possibly need handletickerchange\r\n\r\n\r\n    const { loading, data } = useQuery(GET_CRYPTOCANDLES, {\r\n        variables: { pair: currentticker }\r\n    });\r\n    let titleLabel = currentticker.toUpperCase() + \" (price over the past week)\";\r\n\r\n    // TODO: ADD TOGGLE FOR TIMESCALES\r\n    let info = [];\r\n    if (loading) {\r\n        console.log('loading graph..');\r\n    } else {\r\n        // info = data.cryptoCandles.cryptoInfo.last_day;\r\n        info = data.cryptoCandles.cryptoInfo.last_week;\r\n        // info = data.cryptoCandles.cryptoInfo.last_year;\r\n    }\r\n\r\n    // let xLabels = hourTimeInterval(graphDataPoints));\r\n    let xLabels = sixHourTimeInterval(info);\r\n    // let xLabels = weekTimeInterval(graphDataPoints);\r\n\r\n    return (\r\n        <div className=\"graph-container\">\r\n            <div className=\"graph-card\" >\r\n                <Line\r\n                    datasetIdKey='id'\r\n                    data={{\r\n                        labels: xLabels,\r\n                        datasets: [{\r\n                            data: info,\r\n                            fill: false,\r\n                            borderColor: 'rgb(175, 92, 192)',\r\n                            tension: 0.1,\r\n                            pointStyle: false,\r\n                        }],\r\n                    }}\r\n                    options={{\r\n                        radius: 0,\r\n                        responsive: true,\r\n                        aspectRatio: 2,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: titleLabel\r\n                            },\r\n                            legend: {\r\n                                display: false,\r\n                            }\r\n                        },\r\n                        scales: {\r\n                            x: {\r\n                                display: false,\r\n                            },\r\n                            y: {\r\n                                title: {\r\n                                    display: false,\r\n                                    text: 'Value in USD',\r\n                                    font: {\r\n                                        size: 11\r\n                                    }\r\n                                },\r\n                                display: true,\r\n                                ticks: {\r\n                                    font: {\r\n                                        size: 10\r\n                                    }\r\n                                },\r\n                            },\r\n                        },\r\n                        interaction: { // allows for hover bubble\r\n                            intersect: false,\r\n                            backgroundColor: 'rgba(0, 0, 0, 0.57)',\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n// https://react-chartjs-2.netlify.app/docs/working-with-datasets\r\n// https://www.chartjs.org/docs/latest/charts/line.html\r\n","import moment from 'moment';\r\n\r\nexport function hourTimeInterval(graphDataPoints) {\r\n    var intervalLabels = [];\r\n    let timeStart = moment();\r\n    for (var i = 0; i < graphDataPoints.length; i++) {\r\n        let unixT = (timeStart - (i * 3600000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\r\n        let timePoint = moment(unixT).format(\"MMM-DD-YYYY, HH:00\");\r\n        intervalLabels.push(timePoint);\r\n    }\r\n    return intervalLabels.reverse();\r\n}\r\n\r\nexport function sixHourTimeInterval(graphDataPoints) {\r\n    var intervalLabels = [];\r\n    let timeStart = moment();\r\n    for (var i = 0; i < graphDataPoints.length; i++) {\r\n        let unixT = (timeStart - (i * 21600000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\r\n        let timePoint = moment(unixT).format(\"MMM-DD-YYYY, HH:00:00\");\r\n        intervalLabels.push(timePoint);\r\n    }\r\n    return intervalLabels.reverse();\r\n}\r\n\r\nexport function dayTimeInterval(history) {\r\n    var intervalLabels = [];\r\n    let timeStart = moment();\r\n    for (var i = 0; i < history.length; i++) {\r\n        let unixT = (timeStart - (i * 86400000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\r\n        let timePoint = moment(unixT).format(\"M-D-YYYY\");\r\n        intervalLabels.push(timePoint);\r\n    }\r\n    return intervalLabels.reverse();\r\n}\r\n\r\nexport function weekTimeInterval(history) {\r\n    var intervalLabels = [];\r\n    let timeStart = moment();\r\n    for (var i = 0; i < history.length; i++) {\r\n        let unixT = (timeStart - (i * 604800000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\r\n        let timePoint = moment(unixT).format(\"M-D-YYYY\");\r\n        intervalLabels.push(timePoint);\r\n    }\r\n    return intervalLabels.reverse();\r\n}","import * as React from 'react';\r\nimport Link from '@mui/material/Link';\r\nimport Typography from '@mui/material/Typography';\r\nimport Title from './Title';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_CRYPTODETAILS, GET_PORTFOLIO, GET_ME } from '../utils/queries';\r\n\r\nimport { useCryptoContext } from '../utils/CryptoContext';\r\n\r\n\r\n// gridType is either \"my\" or \"all\"\r\nexport default function InfoTab({ gridType }) {\r\n    const { currentticker } = useCryptoContext();\r\n    // const { currentticker, handletickerchange } = useCryptoContext(); // possibly need handletickerchange\r\n\r\n    // CRYPTO DETAILS QUERY\r\n    const { loading: cryptoDetails_loading, data: cryptoDetails_data } = useQuery(GET_CRYPTODETAILS, {\r\n        variables: { pair: currentticker }\r\n    });\r\n\r\n    const { loading: getme_loading, data: getme_data } = useQuery(GET_ME);\r\n\r\n    let un; //checks username -> profile username\r\n\r\n    if (getme_data) {\r\n        un = getme_data.me.username;\r\n        // console.log(un)\r\n    }\r\n\r\n    // Grabs portfolio data\r\n    const { loading, data } = useQuery(GET_PORTFOLIO, {\r\n        variables: { name: un }\r\n    });\r\n\r\n    // CRYPTO DETAILS LOADING\r\n    let info = 'Loading';\r\n    if (cryptoDetails_loading) {\r\n        console.log('loading info tab..');\r\n    } else {\r\n        info = cryptoDetails_data.cryptoDetails.cryptoInfo;\r\n    }\r\n    let url = `https://cryptowat.ch/charts/COINBASE-PRO:${currentticker}-USD`\r\n\r\n    // PORTFOLIO LOADING\r\n    let curUSDbalance =\"\";\r\n    if (loading) {\r\n        console.log('loading portfolio data..');\r\n    } else {\r\n        curUSDbalance = data.getPortfolio.usdBalance;\r\n        // console.log(curUSDbalance);\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Title>{gridType === \"all\"\r\n                ? currentticker.toUpperCase()\r\n                : \"My Portfolio\"}</Title>\r\n            {\r\n                gridType === \"all\"\r\n                    ?\r\n                    // Crypto info\r\n                    <div><Typography component=\"p\">\r\n                        Daily Change: {info.dailyChange}%\r\n                    </Typography>\r\n                        <Typography component=\"p\">\r\n                            Weekly Change: {info.weeklyChange}%\r\n                        </Typography>\r\n                        <Typography component=\"p\">\r\n                            Yearly Change: {info.yearlyChange}%\r\n                            {/* TODO change later */}\r\n                        </Typography>\r\n                        <Typography component=\"p\">\r\n                            52-Wk High: ${info.yearly_high}\r\n                        </Typography>\r\n                        <Typography component=\"p\">\r\n                            52-Wk Low: ${info.yearly_low}\r\n                        </Typography></div>\r\n                    :\r\n                    // Portfolio info\r\n                    <div>\r\n                        <Typography component=\"h4\">\r\n                            Current USD available:\r\n                            $ {curUSDbalance}\r\n                        </Typography>\r\n                    </div>\r\n            }\r\n            {/* add a chart pie chart hereinstead of the value */}\r\n            <Typography color=\"text.secondary\" sx={{ flex: 1 }}>\r\n                on {new Date().toDateString()}\r\n            </Typography>\r\n            <div>\r\n                {/* https://www.coinbase.com/price/bitcoin, format to make href like this */}\r\n                <Link color=\"primary\" href={url} target=\"_blank\" >\r\n                    Buy Real Coin\r\n                </Link>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport CryptoGrid from './CryptoGrid';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.number.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    'aria-controls': `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nexport default function PortfolioTabs({gridType, handleGridType}) {\r\n  const theme = useTheme();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    if(newValue === 0)\r\n    {\r\n      handleGridType(\"my\");\r\n    }\r\n    else{\r\n      handleGridType(\"all\")\r\n    }\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleChangeIndex = (index) => {\r\n\r\n    setValue(index);\r\n  };\r\n\r\n\r\n  return (\r\n    <Box sx={{ bgcolor: 'background.paper' }}>\r\n      <AppBar position=\"static\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"secondary\"\r\n          textColor=\"inherit\"\r\n          variant=\"fullWidth\"\r\n          aria-label=\"full width tabs example\"\r\n        >\r\n          <Tab label=\"My Cryptos\" {...a11yProps(0)}/>\r\n          <Tab label=\"Browse Cryptos\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <SwipeableViews\r\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n        index={value}\r\n        onChangeIndex={handleChangeIndex}\r\n      >\r\n        <TabPanel value={value} index={0} dir={theme.direction}>\r\n            <CryptoGrid gridType={gridType}/>\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1} dir={theme.direction}>\r\n            <CryptoGrid gridType={gridType}/>\r\n        </TabPanel>\r\n\r\n      </SwipeableViews>\r\n    </Box>\r\n  );\r\n}","import '../styles/dashboard.css';\r\n\r\nimport * as React from 'react';\r\nimport { CryptoProvider } from '../utils/CryptoContext';\r\nimport { GET_CRYPTOINFO, GET_CRYPTOCANDLES } from '../utils/queries';\r\nimport { UPDATE_BALANCE } from '../utils/mutations'\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport Auth from '../utils/auth';\r\n\r\n\r\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport Badge from '@mui/material/Badge';\r\nimport Box from '@mui/material/Box';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport Container from '@mui/material/Container';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Divider from '@mui/material/Divider';\r\nimport Grid from '@mui/material/Grid';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Link from '@mui/material/Link';\r\nimport List from '@mui/material/List';\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport MuiAppBar from '@mui/material/AppBar';\r\nimport Paper from '@mui/material/Paper';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport { mainListItems } from '../components/listItems';\r\nimport CryptoGrid from '../components/CryptoGrid';\r\nimport Graph from '../components/Graph';\r\nimport InfoTab from '../components/InfoTab';\r\nimport PortfolioTabs from '../components/PortfolioTabs';\r\nimport SecondaryListItems from '../components/listItems';\r\n\r\nfunction Copyright(props) {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n            {'Copyright © '}\r\n\r\n            <Link color=\"inherit\" target=\"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\r\n                cryptocraft\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst drawerWidth = 240;\r\nconst AppBar = styled(MuiAppBar, {\r\n    shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    ...(open && {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n    ({ theme, open }) => ({\r\n        '& .MuiDrawer-paper': {\r\n            position: 'relative',\r\n            whiteSpace: 'nowrap',\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n            boxSizing: 'border-box',\r\n            ...(!open && {\r\n                overflowX: 'hidden',\r\n                transition: theme.transitions.create('width', {\r\n                    easing: theme.transitions.easing.sharp,\r\n                    duration: theme.transitions.duration.leavingScreen,\r\n                }),\r\n                width: theme.spacing(7),\r\n                [theme.breakpoints.up('sm')]: {\r\n                    width: theme.spacing(9),\r\n                },\r\n            }),\r\n        },\r\n    }),\r\n);\r\n\r\nconst mdTheme = createTheme();\r\n\r\nfunction PortfolioContent() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [gridType, setGridType] = React.useState(\"my\");\r\n    const toggleDrawer = () => {\r\n        setOpen(!open);\r\n    };\r\n    const logout = (event) => {\r\n        event.preventDefault();\r\n        Auth.logout();\r\n    }\r\n\r\n    const handleGridType = (type) => {\r\n        console.log(gridType, \"changed to\", type);\r\n        setGridType(type);\r\n    };\r\n\r\n    return (\r\n        <CryptoProvider>\r\n            <ThemeProvider theme={mdTheme}>\r\n                <Box sx={{ display: 'flex' }}>\r\n                    <CssBaseline />\r\n                    <AppBar position=\"absolute\" open={open}>\r\n                        <Toolbar\r\n                            sx={{\r\n                                pr: '24px',\r\n                            }}\r\n                        >\r\n                            <IconButton\r\n                                edge=\"start\"\r\n                                color=\"inherit\"\r\n                                aria-label=\"open drawer\"\r\n                                onClick={toggleDrawer}\r\n                                sx={{\r\n                                    marginRight: '36px',\r\n                                    ...(open && { display: 'none' }),\r\n                                }}\r\n                            >\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                            <Typography\r\n                                component=\"h1\"\r\n                                variant=\"h6\"\r\n                                color=\"inherit\"\r\n                                noWrap\r\n                                sx={{ flexGrow: 1 }}\r\n                            >\r\n                                Portfolio\r\n                            </Typography>\r\n                            <IconButton color=\"inherit\" onClick={logout}>\r\n                                <Badge color=\"secondary\">\r\n                                    <LogoutIcon />\r\n                                </Badge>\r\n                            </IconButton>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Drawer variant=\"permanent\" open={open}>\r\n                        <Toolbar\r\n                            sx={{\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'flex-end',\r\n                                px: [1],\r\n                            }}\r\n                        >\r\n                            <IconButton onClick={toggleDrawer}>\r\n                                <ChevronLeftIcon />\r\n                            </IconButton>\r\n                        </Toolbar>\r\n                        <Divider />\r\n                        <List>{mainListItems}</List>\r\n                        <Divider />\r\n                        <List>{SecondaryListItems()}</List>\r\n                    </Drawer>\r\n                    <Box\r\n                        component=\"main\"\r\n                        sx={{\r\n                            backgroundColor: (theme) =>\r\n                                theme.palette.mode === 'light'\r\n                                    ? theme.palette.grey[100]\r\n                                    : theme.palette.grey[900],\r\n                            flexGrow: 1,\r\n                            height: '100vh',\r\n                            overflow: 'auto',\r\n                        }}\r\n                    >\r\n                        <Toolbar />\r\n                        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n                            <Grid container spacing={3}>\r\n                                {/* Chart */}\r\n                                <Grid item xs={12} md={8} lg={9}>\r\n                                    <Paper className=\"graph-paper\"\r\n                                        sx={{\r\n                                            p: 2,\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                        }}\r\n                                    >\r\n                                        <Graph />\r\n                                    </Paper>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={4} lg={3}>\r\n                                    <Paper className=\"stats-paper\"\r\n                                        sx={{\r\n                                            p: 2,\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                        }}\r\n                                    >\r\n                                        <InfoTab gridType={gridType} handleGridType = {handleGridType}/>\r\n                                    </Paper>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <PortfolioTabs gridType={gridType} handleGridType = {handleGridType} />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Copyright sx={{ pt: 4 }} />\r\n                        </Container>\r\n                    </Box>\r\n                </Box>\r\n            </ThemeProvider>\r\n        </CryptoProvider>\r\n    );\r\n}\r\n\r\nexport default function Portfolio() {\r\n    return <PortfolioContent />;\r\n}","import '../styles/dashboard.css';\r\n\r\nimport * as React from 'react';\r\n// import { useEffect } from 'react';\r\nimport { CryptoProvider } from '../utils/CryptoContext';\r\n// import { GET_CRYPTOINFO, GET_CRYPTOCANDLES } from '../utils/queries';\r\nimport { useQuery } from '@apollo/client'\r\n// import { useQuery, useMutation } from '@apollo/client'\r\nimport Auth from '../utils/auth';\r\n\r\n\r\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport Badge from '@mui/material/Badge';\r\nimport Box from '@mui/material/Box';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport Container from '@mui/material/Container';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Divider from '@mui/material/Divider';\r\nimport Grid from '@mui/material/Grid';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Link from '@mui/material/Link';\r\nimport List from '@mui/material/List';\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport MuiAppBar from '@mui/material/AppBar';\r\nimport Paper from '@mui/material/Paper';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport { mainListItems } from '../components/listItems';\r\nimport CryptoGrid from '../components/CryptoGrid';\r\nimport Graph from '../components/Graph';\r\nimport InfoTab from '../components/InfoTab';\r\nimport SecondaryListItems from '../components/listItems';\r\n\r\nimport { GET_ME } from '../utils/queries';\r\n\r\nfunction Copyright(props) {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n            {'Copyright © '}\r\n\r\n            <Link color=\"inherit\" target=\"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\r\n                cryptocraft\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst drawerWidth = 240;\r\nconst AppBar = styled(MuiAppBar, {\r\n    shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    ...(open && {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n    ({ theme, open }) => ({\r\n        '& .MuiDrawer-paper': {\r\n            position: 'relative',\r\n            whiteSpace: 'nowrap',\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n            boxSizing: 'border-box',\r\n            ...(!open && {\r\n                overflowX: 'hidden',\r\n                transition: theme.transitions.create('width', {\r\n                    easing: theme.transitions.easing.sharp,\r\n                    duration: theme.transitions.duration.leavingScreen,\r\n                }),\r\n                width: theme.spacing(7),\r\n                [theme.breakpoints.up('sm')]: {\r\n                    width: theme.spacing(9),\r\n                },\r\n            }),\r\n        },\r\n    }),\r\n);\r\n\r\nconst mdTheme = createTheme();\r\n\r\nfunction DashboardContent() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [gridType, setGridType] = React.useState(\"all\");\r\n    const toggleDrawer = () => {\r\n        setOpen(!open);\r\n    };\r\n    const logout = (event) => {\r\n        event.preventDefault();\r\n        Auth.logout();\r\n    }\r\n    const handleGridType = (type) => {\r\n        console.log(gridType, \"changed to\", type);\r\n        setGridType(type);\r\n    };\r\n\r\n    const { loading, data } = useQuery(GET_ME);\r\n\r\n    // if (data) console.log(data);\r\n\r\n\r\n    return (\r\n        <CryptoProvider>\r\n            <ThemeProvider theme={mdTheme}>\r\n                <Box sx={{ display: 'flex' }}>\r\n                    <CssBaseline />\r\n                    <AppBar position=\"absolute\" open={open}>\r\n                        <Toolbar\r\n                            sx={{\r\n                                pr: '24px',\r\n                            }}\r\n                        >\r\n                            <IconButton\r\n                                edge=\"start\"\r\n                                color=\"inherit\"\r\n                                aria-label=\"open drawer\"\r\n                                onClick={toggleDrawer}\r\n                                sx={{\r\n                                    marginRight: '36px',\r\n                                    ...(open && { display: 'none' }),\r\n                                }}\r\n                            >\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                            <Typography\r\n                                component=\"h1\"\r\n                                variant=\"h6\"\r\n                                color=\"inherit\"\r\n                                noWrap\r\n                                sx={{ flexGrow: 1 }}\r\n                            >\r\n                                Dashboard\r\n                            </Typography>\r\n                            <IconButton color=\"inherit\" onClick={logout}>\r\n                                <Badge color=\"secondary\">\r\n                                    <LogoutIcon />\r\n                                </Badge>\r\n                            </IconButton>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Drawer variant=\"permanent\" open={open}>\r\n                        <Toolbar\r\n                            sx={{\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'flex-end',\r\n                                px: [1],\r\n                            }}\r\n                        >\r\n                            <IconButton onClick={toggleDrawer}>\r\n                                <ChevronLeftIcon />\r\n                            </IconButton>\r\n                        </Toolbar>\r\n                        <Divider />\r\n                        <List>{mainListItems}</List>\r\n                        <Divider />\r\n                        <List>{SecondaryListItems()}</List>\r\n                    </Drawer>\r\n                    <Box\r\n                        component=\"main\"\r\n                        sx={{\r\n                            backgroundColor: (theme) =>\r\n                                theme.palette.mode === 'light'\r\n                                    ? theme.palette.grey[100]\r\n                                    : theme.palette.grey[900],\r\n                            flexGrow: 1,\r\n                            height: '100vh',\r\n                            overflow: 'auto',\r\n                        }}\r\n                    >\r\n                        <Toolbar />\r\n                        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n                            <Grid container spacing={3}>\r\n                                {/* Chart */}\r\n                                <Grid item xs={12} md={8} lg={9}>\r\n                                    <Paper className=\"graph-paper\"\r\n                                        sx={{\r\n                                            p: 2,\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                        }}\r\n                                    >\r\n                                        <Graph />\r\n                                    </Paper>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={4} lg={3}>\r\n                                    <Paper className=\"stats-paper\"\r\n                                        sx={{\r\n                                            p: 2,\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                        }}\r\n                                    >\r\n                                        <InfoTab gridType={gridType} handleGridType = {handleGridType}/>\r\n                                    </Paper>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Paper id=\"dashboard-table-container\" sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n                                        <CryptoGrid gridType={gridType} handleGridType = {handleGridType}/>\r\n                                    </Paper>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Copyright sx={{ pt: 4 }} />\r\n                        </Container>\r\n                    </Box>\r\n                </Box>\r\n            </ThemeProvider>\r\n        </CryptoProvider>\r\n    );\r\n}\r\n\r\nexport default function Dashboard() {\r\n    return <DashboardContent />;\r\n}\r\n","import React from 'react';\r\nimport '../styles/error.css';\r\nconst Error = () => {\r\n    return (\r\n        <div id=\"error-container\">\r\n            <img id = \"mc-error\" src=\"https://fontmeme.com/permalink/211204/5d09fcbff63c28a89211008a437fa8c7.png\" alt=\"minecraft-evenings-font\" border=\"0\"></img>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Error;","import * as React from 'react';\r\n\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\nimport '../styles/login.css';\r\n\r\nimport { useState } from 'react';\r\n\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nfunction Copyright(props) {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" target = \"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\r\n                cryptocraft\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function SignUp() {\r\n    const [formState, setFormState] = useState({\r\n        username: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        password: ''\r\n    })\r\n\r\n    const [addUser, { error, data }] = useMutation(ADD_USER);\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n\r\n        setFormState({\r\n            ...formState,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const { data } = await addUser({\r\n                variables: { ...formState }\r\n            })\r\n            Auth.login(data.addUser.token);\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n\r\n    const divStyle = {\r\n        backgroundColor: 'rgb(202, 102, 122)',\r\n        borderRadius: '3px',\r\n        color: 'white',\r\n        textAlign: 'center'\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Container className = \"signin-container\" component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <Box\r\n                    sx={{\r\n                        marginTop: 8,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign up\r\n                    </Typography>\r\n                    <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    name=\"firstName\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"firstName\"\r\n                                    label=\"First Name\"\r\n                                    autoFocus\r\n                                    value={formState.firstName}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Last Name\"\r\n                                    name=\"lastName\"\r\n                                    value={formState.lastName}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"username\"\r\n                                    label=\"Username\"\r\n                                    name=\"username\"\r\n                                    value={formState.username}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    value={formState.password}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 2 }}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                        <Grid container justifyContent=\"flex-end\">\r\n                            <Grid item>\r\n                                <Link href=\"/login\" variant=\"body2\">\r\n                                    Already have an account? Log in\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {error && (\r\n                            <div className=\"my-3 p-1\" style={divStyle}>\r\n                                {'Try another username and/or password (password must be at least 8 characters)'}\r\n                            </div>\r\n                        )}\r\n                    </Box>\r\n                </Box>\r\n                <Copyright sx={{ mt: 5 }} />\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n}","import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { LOGIN_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Grid from '@mui/material/Grid';\r\nimport Link from '@mui/material/Link';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport '../styles/login.css';\r\n\r\n\r\n\r\nfunction Copyright(props) {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" target = \"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\r\n                cryptocraft\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nconst LogIn = (props) => {\r\n    const [formState, setFormState] = useState({\r\n        username: '', password: ''\r\n    });\r\n    const [login, { error, data }] = useMutation(LOGIN_USER);\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n\r\n        setFormState({\r\n            ...formState,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const { data } = await login({\r\n                variables: { ...formState }\r\n            })\r\n            Auth.login(data.login.token)\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n\r\n        setFormState({\r\n            username: '',\r\n            password: ''\r\n        })\r\n    };\r\n\r\n    const divStyle = {\r\n        backgroundColor: 'rgb(202, 102, 122)',\r\n        borderRadius: '3px',\r\n        color: 'white',\r\n        textAlign: 'center'\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Container className = \"signin-container\" component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <Box\r\n                    sx={{\r\n                        marginTop: 8,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Log in\r\n                    </Typography>\r\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"username\"\r\n                            label=\"Username\"\r\n                            name=\"username\"\r\n                            autoFocus\r\n                            value={formState.username}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            value={formState.password}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 2 }}\r\n                        >\r\n                            Log In\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item>\r\n                                <Link href=\"/signup\" variant=\"body2\">\r\n                                    {\"Don't have an account? Sign Up\"}\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {error && (\r\n                            <div className=\"my-3 p-1\" style={divStyle}>\r\n                                {error.message}\r\n                            </div>\r\n                        )}\r\n                    </Box>\r\n                </Box>\r\n                <Copyright sx={{ mt: 8, mb: 4 }} />\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default LogIn;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport Portfolio from './pages/Portfolio';\r\nimport Dashboard from './pages/Dashboard';\r\nimport Error from './pages/Error';\r\nimport SignUp from './pages/Signup';\r\nimport LogIn from './pages/Login';\r\n\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql'\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : ''\r\n    }\r\n  }\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  const isLoggedIn = localStorage.getItem('id_token');\r\n  let redirect;\r\n\r\n  if (isLoggedIn === null && window.location.pathname !== '/signup') {\r\n    redirect = <Redirect to='/login'/>\r\n  }\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          {redirect}\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Dashboard} />\r\n            <Route exact path=\"/login\" component={LogIn} />\r\n            <Route exact path=\"/signup\" component={SignUp} />\r\n            {/* TODO change routing */}\r\n            <Route exact path=\"/portfolio\" component={Portfolio} />\r\n            <Route exact path=\"/me\" component={Dashboard} />\r\n            <Route component={Error} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}